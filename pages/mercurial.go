
package pages

const Mercurial = "Mercurial is a free, distributed source control management tool. It offers\nyou the power to efficiently handle projects of any size while using an\nintuitive interface. It is easy to use and hard to break, making it ideal for\nanyone working with versioned files.\n\n## Versioning Concepts\n\n### What is version control?\n\nVersion control is a system that keeps track fo changes to a set of file(s)\nand/or directorie(s) over time.\n\n### Why use Mercurial?\n\n* Distributed Architecture - Traditionally version control systems such as CVS\nand Subversion are a client server architecture with a central server to\nstore the revsion history of a project. Mercurial however is a truly\ndistributed architecture, giving each devloper a full local copy of the\nentire development history. It works independently of a central server.\n* Fast - Traditionally version control systems such as CVS and Subversion are a\nclient server architecture with a central server to store the revsion history\nof a project. Mercurial however is a truly distributed architecture, giving\neach devloper a full local copy of the entire development history. It works\nindependently of a central server.\n* Platform Independent - Mercurial was written to be highly platform\nindependent. Much of Mercurial is written in Python, with small performance\ncritical parts written in portable C. Binary releases are available for all\nmajor platforms.\n* Extensible - The functionality of Mercurial can be increased with extensions,\neither by activating the official ones which are shipped with Mercurial or\ndownloading some [from the wiki](https://www.mercurial-scm.org/wiki/UsingExtensions) or by [writing your own](https://www.mercurial-scm.org/wiki/WritingExtensions). Extensions are written in\nPython and can change the workings of the basic commands, add new commands and\naccess all the core functions of Mercurial.\n* Easy to use - The Mercurial command set is consistent with what subversion\nusers would expect, so they are likely to feel right at home. Most dangerous\nactions are part of extensions that need to be enabled to be used.\n* Open Source - Mercurial is free software licensed under the terms of the [GNU\nGeneral Public License Version 2](http://www.gnu.org/licenses/gpl-2.0.txt) or\nany later version.\n\n## Terminology\n\n| Term | Definition |\n| ------------- | ---------------------------------- |\n| Repository | A repository is a collection of revisions |\n| hgrc | A configuration file which stores the defaults for a repository. |\n| revision | A committed changeset: has a REV number |\n| changeset | Set of changes saved as diffs |\n| diff | Changes between file(s) |\n| tag | A named named revision |\n| parent(s) | Immediate ancestor(s) of a revison |\n| branch | A child of a revision |\n| head | A head is a changeset with no child changesets |\n| merge | The process of merging two HEADS |\n| tip | The latest revision in any branch |\n| patch | All of the diffs between two revisions |\n| bundle | Patch with permisÂ­sions and rename support |\n\n## Commands\n\n### init\n\nCreate a new repository in the given directory, the settings and stored\ninformation are in a directory named `.hg`.\n\n```bash\n$ hg init\n```\n\n### help\n\nWill give you access to a very detailed description of each command.\n\n```bash \n# Quickly check what commands are available\n$ hg help\n\n# Get help on a specific command\n# hg help <command>\n$ hg help add\n$ hg help commit\n$ hg help init\n```\n\n### status\n\nShow the differences between what is on disk and what is committed to the current\nbranch or tag.\n\n```bash\n# Will display the status of files\n$ hg status\n\n# Get help on the status subcommand\n$ hg help status\n```\n\n### add\n\nWill add the specified files to the repository on the next commit.\n\n```bash\n# Add a file in the current directory\n$ hg add filename.rb\n\n# Add a file in a sub directory\n$ hg add foo/bar/filename.rb\n\n# Add files by pattern\n$ hg add *.rb\n```\n\n### branch\n\nSet or show the current branch name.\n\n*Branch names are permanent and global. Use 'hg bookmark' to create a\nlight-weight bookmark instead. See 'hg help glossary' for more information\nabout named branches and bookmarks.*\n\n```bash\n# With no argument it shows the current branch name\n$ hg branch\n\n# With a name argument it will change the current branch.\n$ hg branch new_branch\nmarked working directory as branch new_branch\n(branches are permanent and global, did you want a bookmark?)\n```\n\n### tag\n\nAdd one or more tags for the current or given revision.\n\nTags are used to name particular revisions of the repository and are very\nuseful to compare different revisions, to go back to significant earlier\nversions or to mark branch points as releases, etc. Changing an existing tag\nis normally disallowed; use -f/--force to override.\n\n```bash\n# List tags\n$ hg tags\ntip                                2:efc8222cd1fb\nv1.0                               0:37e9b57123b3\n\n# Create a new tag on the current revision\n$ hg tag v1.1\n\n# Create a tag on a specific revision\n$ hg tag -r efc8222cd1fb v1.1.1\n```\n\n### clone\n\nCreate a copy of an existing repository in a new directory.\n\nIf no destination directory name is specified, it defaults to the basename of\nthe source.\n\n```bash\n# Clone a remote repo to a local directory\n$ hg clone https://some-mercurial-server.example.com/reponame\n\n# Clone a local repo to a remote server\n$ hg clone . ssh://username@some-mercurial-server.example.com/newrepo\n\n# Clone a local repo to a local repo\n$ hg clone . /tmp/some_backup_dir\n```\n\n### commit / ci\n\nCommit changes to the given files into the repository. \n\n```bash\n# Commit with a message\n$ hg commit -m 'This is a commit message'\n\n# Commit all added / removed files in the currrent tree\n$ hg commit -A 'Adding and removing all existing files in the tree'\n\n# amend the parent of the working directory with a new commit that contains the\n# changes in the parent in addition to those currently reported by 'hg status',\n$ hg commit --amend -m \"Correct message\"\n```\n\n### diff\n\nShow differences between revisions for the specified files using the unified\ndiff format.\n\n```bash\n# Show the diff between the current directory and a previous revision\n$ hg diff -r 10\n\n# Show the diff between two previous revisions\n$ hg diff -r 30 -r 20\n```\n\n### grep\n\nSearch revision history for a pattern in specified files.\n\n```bash\n# Search files for a specific phrase\n$ hg grep \"TODO:\"\n```\n\n### log / history\n\nShow revision history of entire repository or files. If no revision range is\nspecified, the default is \"tip:0\" unless --follow is set, in which case the\nworking directory parent is used as the starting revision.\n\n```bash\n# Show the history of the entire repository\n$ hg log\n\n# Show the history of a single file\n$ hg log myfile.rb\n\n# Show the revision changes as an ASCII art DAG with the most recent changeset\n# at the top.\n$ hg log -G\n```\n\n### merge\n\nMerge another revision into working directory.\n\n```bash\n# Merge changesets to local repository\n$ hg merge\n\n# Merge from a named branch or revision into the current local branch\n$ hg merge branchname_or_revision\n\n# After successful merge, commit the changes\nhg commit\n```\n\n### move / mv / rename\n\nRename files; equivalent of copy + remove. Mark dest as copies of sources;\nmark sources for deletion. If dest is a directory, copies are put in that\ndirectory. If dest is a file, there can only be one source.\n\n```bash\n# Rename a single file\n$ hg mv foo.txt bar.txt\n\n# Rename a directory\n$ hg mv some_directory new_directory\n```\n\n### pull\n\nPull changes from a remote repository to a local one.\n\n```bash\n# List remote paths\n$ hg paths\nremote1 = http://path/to/remote1\nremote2 = http://path/to/remote2\n\n# Pull from remote 1\n$ hg pull remote1\n\n# Pull from remote 2\n$ hg pull remote2\n```\n\n### push\n\nPush changesets from the local repository to the specified destination.\n\n```bash\n# List remote paths\n$ hg paths\nremote1 = http://path/to/remote1\nremote2 = http://path/to/remote2\n\n# Pull from remote 1\n$ hg push remote1\n\n# Pull from remote 2\n$ hg push remote2\n```\n\n### rebase\n\nMove changeset (and descendants) to a different branch.\n\nRebase uses repeated merging to graft changesets from one part of history\n(the source) onto another (the destination). This can be useful for\nlinearizing *local* changes relative to a master development tree.\n\n* Draft the commits back to the source revision.\n* -s is the source, ie. what you are rebasing.\n* -d is the destination, which is where you are sending it.\n\n```bash\n# Put the commits into draft status\n# This will draft all subsequent commits on the relevant branch\n$ hg phase --draft --force -r 1206\n\n# Rebase from from revision 102 over revision 208\n$ hg rebase -s 102 -d 208\n```\n\n### revert\n\nRestore files to their checkout state. With no revision specified, revert the\nspecified files or directories to the contents they had in the parent of the\nworking directory. This restores the contents of files to an unmodified state\nand unschedules adds, removes, copies, and renames. If the working directory\nhas two parents, you must explicitly specify a revision.\n\n```bash\n# Reset a specific file to its checked out state\n$ hg revert oops_i_did_it_again.txt\n\n# Revert a specific file to its checked out state without leaving a .orig file\n# around\n$ hg revert -C oops_i_did_it_again.txt\n\n# Revert all changes\n$ hg revert -a\n```\n\n### rm / remove\n\nRemove the specified files on the next commit.\n\n```bash\n# Remove a spcific file\n$ hg remove go_away.txt\n\n# Remove a group of files by pattern\n$ hg remove *.txt\n```\n\n## Further information\n\n* [Learning Mercurial in Workflows](https://www.mercurial-scm.org/guide)\n* [Mercurial Quick Start](https://www.mercurial-scm.org/wiki/QuickStart)\n* [Mercurial: The Definitive Guide by Bryan O'Sullivan](http://hgbook.red-bean.com/)"
