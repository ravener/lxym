
package pages

const Coldfusion = "ColdFusion is a scripting language for web development.\n[Read more here.](http://www.adobe.com/products/coldfusion-family.html)\n\n### CFML\n_**C**old**F**usion **M**arkup **L**anguage_  \nColdFusion started as a tag-based language. Almost all functionality is available using tags.\n\n```cfm\n<em>HTML tags have been provided for output readability</em>\n\n<!--- Comments start with \"<!---\" and end with \"--->\" --->\n<!---\n    Comments can\n    also\n    span\n    multiple lines\n--->\n\n<!--- CFML tags have a similar format to HTML tags. --->\n<h1>Simple Variables</h1>\n<!--- Variable Declaration: Variables are loosely typed, similar to javascript --->\n<p>Set <b>myVariable</b> to \"myValue\"</p>\n<cfset myVariable = \"myValue\" />\n<p>Set <b>myNumber</b> to 3.14</p>\n<cfset myNumber = 3.14 />\n\n<!--- Displaying simple data --->\n<!--- Use <cfoutput> for simple values such as strings, numbers, and expressions --->\n<p>Display <b>myVariable</b>: <cfoutput>#myVariable#</cfoutput></p><!--- myValue --->\n<p>Display <b>myNumber</b>: <cfoutput>#myNumber#</cfoutput></p><!--- 3.14 --->\n\n<hr />\n\n<h1>Complex Variables</h1>\n<!--- Declaring complex variables --->\n<!--- Declaring an array of 1 dimension: literal or bracket notation --->\n<p>Set <b>myArray1</b> to an array of 1 dimension using literal or bracket notation</p>\n<cfset myArray1 = [] />\n<!--- Declaring an array of 1 dimension: function notation --->\n<p>Set <b>myArray2</b> to an array of 1 dimension using function notation</p>\n<cfset myArray2 = ArrayNew(1) />\n\n<!--- Outputting complex variables --->\n<p>Contents of <b>myArray1</b></p>\n<cfdump var=\"#myArray1#\" /> <!--- An empty array object --->\n<p>Contents of <b>myArray2</b></p>\n<cfdump var=\"#myArray2#\" /> <!--- An empty array object --->\n\n<!--- Operators --->\n<!--- Arithmetic --->\n<h1>Operators</h1>\n<h2>Arithmetic</h2>\n<p>1 + 1 = <cfoutput>#1 + 1#</cfoutput></p>\n<p>10 - 7 = <cfoutput>#10 - 7#<br /></cfoutput></p>\n<p>15 * 10 = <cfoutput>#15 * 10#<br /></cfoutput></p>\n<p>100 / 5 = <cfoutput>#100 / 5#<br /></cfoutput></p>\n<p>120 % 5 = <cfoutput>#120 % 5#<br /></cfoutput></p>\n<p>120 mod 5 = <cfoutput>#120 mod 5#<br /></cfoutput></p>\n\n<hr />\n\n<!--- Comparison --->\n<h2>Comparison</h2>\n<h3>Standard Notation</h3>\n<p>Is 1 eq 1? <cfoutput>#1 eq 1#</cfoutput></p>\n<p>Is 15 neq 1? <cfoutput>#15 neq 1#</cfoutput></p>\n<p>Is 10 gt 8? <cfoutput>#10 gt 8#</cfoutput></p>\n<p>Is 1 lt 2? <cfoutput>#1 lt 2#</cfoutput></p>\n<p>Is 10 gte 5? <cfoutput>#10 gte 5#</cfoutput></p>\n<p>Is 1 lte 5? <cfoutput>#1 lte 5#</cfoutput></p>\n\n<h3>Alternative Notation</h3>\n<p>Is 1 == 1? <cfoutput>#1 eq 1#</cfoutput></p>\n<p>Is 15 != 1? <cfoutput>#15 neq 1#</cfoutput></p>\n<p>Is 10 > 8? <cfoutput>#10 gt 8#</cfoutput></p>\n<p>Is 1 < 2? <cfoutput>#1 lt 2#</cfoutput></p>\n<p>Is 10 >= 5? <cfoutput>#10 gte 5#</cfoutput></p>\n<p>Is 1 <= 5? <cfoutput>#1 lte 5#</cfoutput></p>\n\n<hr />\n\n<!--- Control Structures --->\n<h1>Control Structures</h1>\n\n<cfset myCondition = \"Test\" />\n\n<p>Condition to test for: \"<cfoutput>#myCondition#</cfoutput>\"</p>\n\n<cfif myCondition eq \"Test\">\n    <cfoutput>#myCondition#. We're testing.</cfoutput>\n<cfelseif myCondition eq \"Production\">\n    <cfoutput>#myCondition#. Proceed Carefully!!!</cfoutput>\n<cfelse>\n    myCondition is unknown\n</cfif>\n\n<hr />\n\n<!--- Loops --->\n<h1>Loops</h1>\n<h2>For Loop</h2>\n<cfloop from=\"0\" to=\"10\" index=\"i\">\n\t<p>Index equals <cfoutput>#i#</cfoutput></p>\n</cfloop>\n\n<h2>For Each Loop (Complex Variables)</h2>\n\n<p>Set <b>myArray3</b> to [5, 15, 99, 45, 100]</p>\n\n<cfset myArray3 = [5, 15, 99, 45, 100] />\n\n<cfloop array=\"#myArray3#\" index=\"i\">\n\t<p>Index equals <cfoutput>#i#</cfoutput></p>\n</cfloop>\n\n<p>Set <b>myArray4</b> to [\"Alpha\", \"Bravo\", \"Charlie\", \"Delta\", \"Echo\"]</p>\n\n<cfset myArray4 = [\"Alpha\", \"Bravo\", \"Charlie\", \"Delta\", \"Echo\"] />\n\n<cfloop array=\"#myArray4#\" index=\"s\">\n\t<p>Index equals <cfoutput>#s#</cfoutput></p>\n</cfloop>\n\n<h2>Switch Statement</h2>\n\n<p>Set <b>myArray5</b> to [5, 15, 99, 45, 100]</p>\n\n<cfset myArray5 = [5, 15, 99, 45, 100] />\n\n<cfloop array=\"#myArray5#\" index=\"i\">\n\t<cfswitch expression=\"#i#\">\n\t\t<cfcase value=\"5,15,45\" delimiters=\",\">\n\t\t\t<p><cfoutput>#i#</cfoutput> is a multiple of 5.</p>\n\t\t</cfcase>\n\t\t<cfcase value=\"99\">\n\t\t\t<p><cfoutput>#i#</cfoutput> is ninety-nine.</p>\n\t\t</cfcase>\n\t\t<cfdefaultcase>\n\t\t\t<p><cfoutput>#i#</cfoutput> is not 5, 15, 45, or 99.</p>\n\t\t</cfdefaultcase> \n\t</cfswitch> \n</cfloop>\n\n<hr />\n\n<h1>Converting types</h1>\n\n<style>\n\ttable.table th, table.table td {\n\t\tborder: 1px solid #000000;\n\t\tpadding: 2px;\n\t}\n\t\n\ttable.table th {\n\t\tbackground-color: #CCCCCC;\n\t}\n</style>\n\n<table class=\"table\" cellspacing=\"0\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Value</th>\n\t\t\t<th>As Boolean</th>\n\t\t\t<th>As number</th>\n\t\t\t<th>As date-time</th>\n\t\t\t<th>As string</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>\"Yes\"</th>\n\t\t\t<td>TRUE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Error</td>\n\t\t\t<td>\"Yes\"</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>\"No\"</th>\n\t\t\t<td>FALSE</td>\n\t\t\t<td>0</td>\n\t\t\t<td>Error</td>\n\t\t\t<td>\"No\"</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>TRUE</th>\n\t\t\t<td>TRUE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Error</td>\n\t\t\t<td>\"Yes\"</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>FALSE</th>\n\t\t\t<td>FALSE</td>\n\t\t\t<td>0</td>\n\t\t\t<td>Error</td>\n\t\t\t<td>\"No\"</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>Number</th>\n\t\t\t<td>True if Number is not 0; False otherwise.</td>\n\t\t\t<td>Number</td>\n\t\t\t<td>See &#34;Date-time values&#34; earlier in this chapter.</td>\n\t\t\t<td>String representation of the number (for example, &#34;8&#34;).</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>String</th>\n\t\t\t<td>If \"Yes\", True <br>If \"No\", False <br>If it can be converted to 0, False <br>If it can be converted to any other number, True</td>\n\t\t\t<td>If it represents a number (for example, &#34;1,000&#34; or &#34;12.36E-12&#34;), it is converted to the corresponding number.</td>\n\t\t\t<td>If it represents a date-time (see next column), it is converted to the numeric value of the corresponding date-time object. <br>If it is an ODBC date, time, or timestamp (for example &#34;{ts &#39;2001-06-14 11:30:13&#39;}&#34;, or if it is expressed in a standard U.S. date or time format, including the use of full or abbreviated month names, it is converted to the corresponding date-time value. <br>Days of the week or unusual punctuation result in an error. <br>Dashes, forward-slashes, and spaces are generally allowed.</td>\n\t\t\t<td>String</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>Date</th>\n\t\t\t<td>Error</td>\n\t\t\t<td>The numeric value of the date-time object.</td>\n\t\t\t<td>Date</td>\n\t\t\t<td>An ODBC timestamp.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<hr />\n\n<h1>Components</h1>\n\n<em>Code for reference (Functions must return something to support IE)</em>\n```\n```cfs\n<cfcomponent>\n\t<cfset this.hello = \"Hello\" />\n\t<cfset this.world = \"world\" />\n\n\t<cffunction name=\"sayHello\">\n\t\t<cfreturn this.hello & \", \" & this.world & \"!\" />\n\t</cffunction>\n\t\n\t<cffunction name=\"setHello\">\n\t\t<cfargument name=\"newHello\" type=\"string\" required=\"true\" />\n\t\t\n\t\t<cfset this.hello = arguments.newHello />\n\t\t \n\t\t<cfreturn true />\n\t</cffunction>\n\t\n\t<cffunction name=\"setWorld\">\n\t\t<cfargument name=\"newWorld\" type=\"string\" required=\"true\" />\n\t\t\n\t\t<cfset this.world = arguments.newWorld />\n\t\t \n\t\t<cfreturn true />\n\t</cffunction>\n\t\n\t<cffunction name=\"getHello\">\n\t\t<cfreturn this.hello />\n\t</cffunction>\n\t\n\t<cffunction name=\"getWorld\">\n\t\t<cfreturn this.world />\n\t</cffunction>\n</cfcomponent>\n\n<cfset this.hello = \"Hello\" />\n<cfset this.world = \"world\" />\n\n<cffunction name=\"sayHello\">\n\t<cfreturn this.hello & \", \" & this.world & \"!\" />\n</cffunction>\n\n<cffunction name=\"setHello\">\n\t<cfargument name=\"newHello\" type=\"string\" required=\"true\" />\n\t\n\t<cfset this.hello = arguments.newHello />\n\t \n\t<cfreturn true />\n</cffunction>\n\n<cffunction name=\"setWorld\">\n\t<cfargument name=\"newWorld\" type=\"string\" required=\"true\" />\n\t\n\t<cfset this.world = arguments.newWorld />\n\t \n\t<cfreturn true />\n</cffunction>\n\n<cffunction name=\"getHello\">\n\t<cfreturn this.hello />\n</cffunction>\n\n<cffunction name=\"getWorld\">\n\t<cfreturn this.world />\n</cffunction>\n\n\n<b>sayHello()</b>\n<cfoutput><p>#sayHello()#</p></cfoutput>\n<b>getHello()</b>\n<cfoutput><p>#getHello()#</p></cfoutput>\n<b>getWorld()</b>\n<cfoutput><p>#getWorld()#</p></cfoutput>\n<b>setHello(\"Hola\")</b>\n<cfoutput><p>#setHello(\"Hola\")#</p></cfoutput>\n<b>setWorld(\"mundo\")</b>\n<cfoutput><p>#setWorld(\"mundo\")#</p></cfoutput>\n<b>sayHello()</b>\n<cfoutput><p>#sayHello()#</p></cfoutput>\n<b>getHello()</b>\n<cfoutput><p>#getHello()#</p></cfoutput>\n<b>getWorld()</b>\n<cfoutput><p>#getWorld()#</p></cfoutput>\n```\n\n### CFScript\n_**C**old**F**usion **S**cript_  \nIn recent years, the ColdFusion language has added script syntax to mirror tag functionality. When using an up-to-date CF server, almost all functionality is available using scrypt syntax.\n\n## Further Reading\n\nThe links provided here below are just to get an understanding of the topic, feel free to Google and find specific examples.\n\n1. [Coldfusion Reference From Adobe](https://helpx.adobe.com/coldfusion/cfml-reference/topics.html)\n2. [Open Source Documentation](http://cfdocs.org/)"
