
package pages

const Jsonnet = "Jsonnet is a powerful templating language for JSON. Any valid JSON\ndocument is a valid Jsonnet object. For an interactive demo/tutorial,\nclick [here](https://jsonnet.org/learning/tutorial.html)\n\n```python\n// single line comment\n\n/*\n    multiline comment\n*/\n\n# as well as python style comment\n\n# define a variable.\n# Variables have no effect in the generated JSON without being used.\nlocal num1 = 1;\nlocal num2 = 1 + 1;\nlocal num3 = 5 - 2;\nlocal num4 = 9 % 5;\nlocal num5 = 10 / 2.0;\n# jsonnet is a lazy language, if a variable is not used, it is not evaluated.\nlocal num_runtime_error = 1 / 0;\n\n# fields are valid identifiers without quotes\nlocal obj1 = { a: 'letter a', B: 'letter B' };\n\nlocal arr1 = ['a', 'b', 'c'];\n\n# string literals use \" or '.\nlocal str1 = 'a' + 'B';\n# multiline text literal in between |||\n# Each line must start with a white space.\nlocal str_multiline = |||\n  this is a\n  multiline string\n|||;\n# Python-compatible string formatting is available via %\n# When combined with ||| this can be used for templating text files.\nlocal str_templating = |||\n  %(f1)0.3f\n||| % { f1: 1.2345678 };\nassert str_templating == '1.235\\n';\n\n# if b then e else e. The else branch is optional and defaults to null\nlocal var1 = if 3 < 2 then \"YES\";\nassert var1 == null;\n\nlocal obj2 = {\n  # variable defined inside the object ends with ','\n  local var_in_obj = 0,\n\n  local vowels = ['a', 'e', 'i', 'o', 'u'],\n  local numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n\n  # [num] to look up an array element\n  first_vowel: vowels[0],\n  # can also slice the array like in Python\n  even_numbers: numbers[1::2],\n\n  # python-style list and object comprehensions are also supported\n  double_numbers: [x * 2 for x in numbers],\n  even_numbers_map: {\n      # [ ] syntax in field name is to compute the field name dynamically\n      [x + '_is_even']: true for x in numbers if x % 2 == 0\n  },\n\n  nested: {\n    nested_field1: 'some-value',\n    # self refers to the current object\n    # [\"field-name\"] or .field-name can be used to look up a field\n    nested_field2: self.nested_field1,\n    nested_field3: self.nested_field1,\n    # $ refers to outer-most object\n    nested_field4: $.first_vowel,\n\n    assert self.nested_field1 == self.nested_field2,\n    assert self.nested_field1 == self.nested_field3,\n  },\n\n  special_field: 'EVERYTHING FEELS BAD',\n};\n\nlocal obj3 = {\n  local var_in_obj = 1.234,\n  local var_in_obj2 = { a: { b: 'c' } },\n\n  concat_array: [1, 2, 3] + [4],\n  # strings can be concat with +,\n  # which implicitly converts one operand to string if needed.\n  concat_string: '123' + 4,\n\n  # == tests deep equality\n  equals: { a: { b: 'c', d: {} } } == var_in_obj2,\n\n  special_field: 'this feels good',\n};\n\n# objects can be merged with + where the right-hand side wins field conflicts\nlocal obj4 = obj2 + obj3;\nassert obj4.special_field == 'this feels good';\n\n# define a function\n# functions have positional parameters, named parameters, and default arguments\nlocal my_function(x, y, z=1) = x + y - z;\nlocal num6 = my_function(7, 8, 9);\nlocal num7 = my_function(8, z=10, y=9);\nlocal num8 = my_function(4, 5);\n# inline anonymous function\nlocal num9 = (function(x) x * x)(3);\n\nlocal obj5 = {\n  # define a method\n  # fields defined with :: are hidden, which does not apper in generated JSON\n  # function cannot be serialized so need to be hidden\n  # if the object is used in the generated JSON.\n  is_odd(x):: x % 2 == 1,\n};\nassert obj5 == {};\n\n# a jsonnet document has to evaluate to something\n# be it an object, list, number or just string literal\n\"FIN\"\n\n```\n\n## Further Reading\nThere are a few but important concepts that are not touched in this exmaple, including:\n\n- Passing variables from command line: [Parameterize Entire Config](https://jsonnet.org/learning/tutorial.html#parameterize-entire-config)\n- Import other jsonnet libraries/files: [Imports](https://jsonnet.org/learning/tutorial.html#imports)\n- In depth example of OOP aspect of Jsonnet: [Object-Orientation](https://jsonnet.org/learning/tutorial.html#Object-Orientation)\n- Useful standard library: [Stdlib](https://jsonnet.org/ref/stdlib.html)"
