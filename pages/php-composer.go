
package pages

const Php_Composer = "[Composer](https://getcomposer.org/) is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.\n\n# Installing\n\n```sh\n# Installs the composer.phar binary into the current directory\ncurl -sS https://getcomposer.org/installer | php\n# If you use this approach, you will need to invoke composer like this:\nphp composer.phar about\n\n# Installs the binary into ~/bin/composer\n# Note: make sure ~/bin is in your shell's PATH environment variable\ncurl -sS https://getcomposer.org/installer | php -- --install-dir=~/bin --filename=composer\n```\n\nWindows users should follow the [Windows installation instructions](https://getcomposer.org/doc/00-intro.md#installation-windows)\n\n## Confirming installation\n\n```sh\n# Check version and list options\ncomposer\n\n# Get more help for options\ncomposer help require\n\n# Check if Composer is able to do the things it needs, and if it's up to date\ncomposer diagnose\ncomposer diag # shorthand\n\n# Updates the Composer binary to the latest version\ncomposer self-update\ncomposer self # shorthand\n```\n\n# Usage\n\nComposer stores your project dependencies in `composer.json`. You can edit this file, but it is best to let Composer manage it for you.\n\n```sh\n# Create a new project in the current folder\ncomposer init\n# runs an interactive questionnaire asking you for details about your project.  Leaving them blank is fine unless you are making other projects dependent on this one.\n\n# If a composer.json file already exists, download the dependencies\ncomposer install\n\n# To download the just the production dependencies, i.e. excluding development dependencies\ncomposer install --no-dev\n\n# Add a production dependency to this project\ncomposer require guzzlehttp/guzzle\n# will figure out what the latest version of guzzlehttp/guzzle is, download it, and add the new dependency to composer.json's require field.\n\ncomposer require guzzlehttp/guzzle:6.0.*\n# will download the latest version matching the pattern (eg. 6.0.2) and add the dependency to composer.json's require field\n\ncomposer require --dev phpunit/phpunit:~4.5.0\n# will require as a development dependency. Will use the latest version >=4.5.0 and < 4.6.0\n\ncomposer require-dev phpunit/phpunit:^4.5.0\n# will require as a development dependency. Will use the latest version >=4.5.0 and < 5.0\n\n# For more information on Composer version matching, see [Composer's documentation on Versions](https://getcomposer.org/doc/articles/versions.md) for more details\n\n# To see what packages are available to install and currently installed\ncomposer show\n\n# To see what packages are currently installed\ncomposer show --installed\n\n# To find a package with 'mailgun' in its name or description\ncomposer search mailgun\n```\n\n[Packagist.org](https://packagist.org/) is the main repository for Composer packages. Search there for existing third-party packages.\n\n## `composer.json` vs `composer.lock`\n\nThe `composer.json` file stores your project's floating version preferences for each dependency, along with other information.\n\nThe `composer.lock` file stores exactly which version it has downloaded for each dependency. Never edit this file.\n\nIf you include the `composer.lock` file in your git repository, every developer will install the currently used version of the dependency. Even when a new version of a dependency is released, Composer will continue to download the version recorded in the lock file.\n\n```sh\n# If you want to update all the dependencies to their newest version still matching your version preferences\ncomposer update\n\n# If you want the new version of a particular dependency:\ncomposer update phpunit/phpunit\n\n# If you wish to migrate a package to a newer version preference, you may need to remove the older package and its dependencies first.\ncomposer remove --dev phpunit/phpunit\ncomposer require --dev phpunit/phpunit:^5.0\n\n```\n\n## Autoloader\n\nComposer creates an autoloader class you can require from your application. You can make instances of classes via their namespace.\n\n```php\nrequire __DIR__ . '/vendor/autoload.php';\n\n$mailgun = new Mailgun\\Mailgun(\"key\");\n```\n\n### PSR-4 Autoloader\n\nYou can add your own namespaces to the autoloader.\n\nIn `composer.json`, add a 'autoload' field:\n\n```json\n{\n  \"autoload\": {\n    \"psr-4\": {\"Acme\\\\\": \"src/\"}\n  }\n}\n```\nThis will tell the autoloader to look for anything in the `\\Acme\\` namespace within the `src` folder.\n\nYou can also [use PSR-0, a Classmap or just a list of files to include](https://getcomposer.org/doc/04-schema.md#autoload). There is also the `autoload-dev` field for development-only namespaces.\n\nWhen adding or modifying the autoload key, you will need to rebuild the autoloader:\n\n```sh\ncomposer dump-autoload\ncomposer dump # shorthand\n\n# Optimizes PSR0 and PSR4 packages to be loaded with classmaps too. Slow to run, but improves performance on production.\ncomposer dump-autoload --optimize --no-dev\n```\n\n# Composer's Cache\n\n```sh\n# Composer will retain downloaded packages to use in the future. Clear it with:\ncomposer clear-cache\n```\n\n# Troubleshooting\n\n```sh\ncomposer diagnose\ncomposer self-update\ncomposer clear-cache\n```\n\n## Topics not (yet) covered in this tutorial\n\n* Creating and distributing your own packages on Packagist.org or elsewhere\n* Pre- and post- script hooks: run tasks when certain composer events take place\n\n### References\n\n* [Composer - Dependency Manager for PHP](https://getcomposer.org/)\n* [Packagist.org](https://packagist.org/)"
