
package pages

const Sql = "Structured Query Language (SQL) is an [ISO/IEC 9075](https://www.iso.org/standard/63555.html) standard language for creating and working with databases stored in a set of tables. Implementations usually add their own extensions to the language; [Comparison of different SQL implementations](http://troels.arvin.dk/db/rdbms/) is a good reference on product differences.\n\nImplementations typically provide a command line prompt where you can enter the commands shown here interactively, and they also offer a way to execute a series of these commands stored in a script file.  (Showing that you’re done with the interactive prompt is a good example of something that isn’t standardized--most SQL implementations support the keywords QUIT, EXIT, or both.)\n\nSeveral of these sample commands assume that the [MySQL employee sample database](https://dev.mysql.com/doc/employee/en/) available on [github](https://github.com/datacharmer/test_db) has already been loaded. The github files are scripts of commands, similar to the relevant commands below, that create and populate tables of data about a fictional company’s employees. The syntax for running these scripts will depend on the SQL implementation you are using. A utility that you run from the operating system prompt is typical.\n\n\n```sql\n-- Comments start with two hyphens. End each command with a semicolon.\n\n-- SQL is not case-sensitive about keywords. The sample commands here\n-- follow the convention of spelling them in upper-case because it makes\n-- it easier to distinguish them from database, table, and column names.\n\n-- Create and delete a database. Database and table names are case-sensitive.\nCREATE DATABASE someDatabase;\nDROP DATABASE someDatabase;\n\n-- List available databases.\nSHOW DATABASES;\n\n-- Use a particular existing database.\nUSE employees;\n\n-- Select all rows and columns from the current database's departments table.\n-- Default activity is for the interpreter to scroll the results on your screen.\nSELECT * FROM departments;\n\n-- Retrieve all rows from the departments table,\n-- but only the dept_no and dept_name columns.\n-- Splitting up commands across lines is OK.\nSELECT dept_no,\n       dept_name FROM departments;\n\n-- Retrieve all departments columns, but just 5 rows.\nSELECT * FROM departments LIMIT 5;\n\n-- Retrieve dept_name column values from the departments\n-- table where the dept_name value has the substring 'en'.\nSELECT dept_name FROM departments WHERE dept_name LIKE '%en%';\n\n-- Retrieve all columns from the departments table where the dept_name\n-- column starts with an 'S' and has exactly 4 characters after it.\nSELECT * FROM departments WHERE dept_name LIKE 'S____';\n\n-- Select title values from the titles table but don't show duplicates.\nSELECT DISTINCT title FROM titles;\n\n-- Same as above, but sorted (case-sensitive) by the title values.\nSELECT DISTINCT title FROM titles ORDER BY title;\n\n-- Show the number of rows in the departments table.\nSELECT COUNT(*) FROM departments;\n\n-- Show the number of rows in the departments table that\n-- have 'en' as a substring of the dept_name value.\nSELECT COUNT(*) FROM departments WHERE dept_name LIKE '%en%';\n\n-- A JOIN of information from multiple tables: the titles table shows\n-- who had what job titles, by their employee numbers, from what\n-- date to what date. Retrieve this information, but instead of the\n-- employee number, use the employee number as a cross-reference to\n-- the employees table to get each employee's first and last name\n-- instead. (And only get 10 rows.)\n\nSELECT employees.first_name, employees.last_name,\n       titles.title, titles.from_date, titles.to_date\nFROM titles INNER JOIN employees ON\n       employees.emp_no = titles.emp_no LIMIT 10;\n\n-- List all the tables in all the databases. Implementations typically provide\n-- their own shortcut command to do this with the database currently in use.\nSELECT * FROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_TYPE='BASE TABLE';\n\n-- Create a table called tablename1, with the two columns shown, for\n-- the database currently in use. Lots of other options are available\n-- for how you specify the columns, such as their datatypes.\nCREATE TABLE tablename1 (fname VARCHAR(20), lname VARCHAR(20));\n\n-- Insert a row of data into the table tablename1. This assumes that the\n-- table has been defined to accept these values as appropriate for it.\nINSERT INTO tablename1 VALUES('Richard','Mutt');\n\n-- In tablename1, change the fname value to 'John'\n-- for all rows that have an lname value of 'Mutt'.\nUPDATE tablename1 SET fname='John' WHERE lname='Mutt';\n\n-- Delete rows from the tablename1 table\n-- where the lname value begins with 'M'.\nDELETE FROM tablename1 WHERE lname like 'M%';\n\n-- Delete all rows from the tablename1 table, leaving the empty table.\nDELETE FROM tablename1;\n\n-- Remove the entire tablename1 table.\nDROP TABLE tablename1;\n```\n\n## Further Reading\n\n* [Codecademy - SQL](https://www.codecademy.com/learn/learn-sql) A good introduction to SQL in a \"learn by doing it\" format.\n* [Database System Concepts](https://www.db-book.com) book's Chapter 3 - Introduction to SQL has an in depth explanation of SQL concepts."
