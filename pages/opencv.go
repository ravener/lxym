
package pages

const Opencv = "### Opencv\n\nOpenCV (Open Source Computer Vision) is a library of programming functions mainly aimed at real-time computer vision. \nOriginally developed by Intel, it was later supported by Willow Garage then Itseez (which was later acquired by Intel). \nOpencv currently supports wide variety of languages like, C++, Python, Java etc\n\n#### Installation\nPlease refer to these articles for installation of OpenCV on your computer.\n\n* Windows Installation Instructions: [https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_setup/py_setup_in_windows/py_setup_in_windows.html#install-opencv-python-in-windows](https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_setup/py_setup_in_windows/py_setup_in_windows.html#install-opencv-python-in-windows)\n* Mac Installation Instructions (High Sierra): [https://medium.com/@nuwanprabhath/installing-opencv-in-macos-high-sierra-for-python-3-89c79f0a246a](https://medium.com/@nuwanprabhath/installing-opencv-in-macos-high-sierra-for-python-3-89c79f0a246a)\n* Linux Installation Instructions (Ubuntu 18.04): [https://www.pyimagesearch.com/2018/05/28/ubuntu-18-04-how-to-install-opencv](https://www.pyimagesearch.com/2018/05/28/ubuntu-18-04-how-to-install-opencv)\n\n### Here we will be focusing on python implementation of OpenCV\n\n```python\n# Reading image in OpenCV\nimport cv2\nimg = cv2.imread('cat.jpg')\n\n# Displaying the image\n# imshow() function is used to display the image\ncv2.imshow('Image',img)\n# Your first arguement is the title of the window and second parameter is image\n# If you are getting error, Object Type None, your image path may be wrong. Please recheck the pack to the image\ncv2.waitKey(0)\n# waitKey() is a keyboard binding function and takes arguement in milliseconds. For GUI events you MUST use waitKey() function.\n\n# Writing an image\ncv2.imwrite('catgray.png',img)\n# first arguement is the file name and second is the image\n\n# Convert image to grayscale\ngray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n# Capturing Video from Webcam\ncap = cv2.VideoCapture(0)\n#0 is your camera, if you have multiple camera, you need to enter their id\nwhile(True):\n    # Capturing frame-by-frame\n    _, frame = cap.read()\n    cv2.imshow('Frame',frame)\n    # When user presses q -> quit\n    if cv2.waitKey(1) & 0xFF == ord('q'):\n        break\n# Camera must be released\ncap.release()\n\n# Playing Video from file\ncap = cv2.VideoCapture('movie.mp4')\nwhile(cap.isOpened()):\n    _, frame = cap.read()\n    # Play the video in grayscale\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n    cv2.imshow('frame',gray)\n    if cv2.waitKey(1) & 0xFF == ord('q'):\n        break\ncap.release()\n\n# Drawing The Line in OpenCV\n# cv2.line(img,(x,y),(x1,y1),(color->r,g,b->0 to 255),thickness)\ncv2.line(img,(0,0),(511,511),(255,0,0),5)\n\n# Drawing Rectangle\n# cv2.rectangle(img,(x,y),(x1,y1),(color->r,g,b->0 to 255),thickness)\n# thickness = -1 used for filling the rectangle\ncv2.rectangle(img,(384,0),(510,128),(0,255,0),3)\n\n# Drawing Circle\ncv2.circle(img,(xCenter,yCenter), radius, (color->r,g,b->0 to 255), thickness)\ncv2.circle(img,(200,90), 100, (0,0,255), -1)\n\n# Drawing Ellipse\ncv2.ellipse(img,(256,256),(100,50),0,0,180,255,-1)\n\n# Adding Text On Images\ncv2.putText(img,\"Hello World!!!\", (x,y), cv2.FONT_HERSHEY_SIMPLEX, 2, 255)\n\n# Blending Images\nimg1 = cv2.imread('cat.png')\nimg2 = cv2.imread('openCV.jpg')\ndst = cv2.addWeighted(img1,0.5,img2,0.5,0)\n\n# Thresholding image\n# Binary Thresholding\n_,thresImg = cv2.threshold(img,127,255,cv2.THRESH_BINARY)\n# Adaptive Thresholding\nadapThres = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2)\n\n# Blur Image\n# Gaussian Blur\nblur = cv2.GaussianBlur(img,(5,5),0)\n# Median Blur\nmedianBlur = cv2.medianBlur(img,5)\n\n# Canny Edge Detection\nimg = cv2.imread('cat.jpg',0)\nedges = cv2.Canny(img,100,200)\n\n# Face Detection using Haar Cascades\n# Download Haar Cascades from https://github.com/opencv/opencv/blob/master/data/haarcascades/\nimport cv2\nimport numpy as np\nface_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\neye_cascade = cv2.CascadeClassifier('haarcascade_eye.xml')\n\nimg = cv2.imread('human.jpg')\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\naces = face_cascade.detectMultiScale(gray, 1.3, 5)\nfor (x,y,w,h) in faces:\n    cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)\n    roi_gray = gray[y:y+h, x:x+w]\n    roi_color = img[y:y+h, x:x+w]\n    eyes = eye_cascade.detectMultiScale(roi_gray)\n    for (ex,ey,ew,eh) in eyes:\n        cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)\n\ncv2.imshow('img',img)\ncv2.waitKey(0)\n\ncv2.destroyAllWindows()\n# destroyAllWindows() destroys all windows. \n# If you wish to destroy specific window pass the exact name of window you created.\n```\n\n### Further Reading:\n\n* Download Cascade from [https://github.com/opencv/opencv/blob/master/data/haarcascades](https://github.com/opencv/opencv/blob/master/data/haarcascades)\n* OpenCV drawing Functions [https://docs.opencv.org/2.4/modules/core/doc/drawing_functions.html](https://docs.opencv.org/2.4/modules/core/doc/drawing_functions.html)\n* An up-to-date language reference can be found at [https://opencv.org](https://opencv.org)\n* Additional resources may be found at [https://en.wikipedia.org/wiki/OpenCV](https://en.wikipedia.org/wiki/OpenCV)\n* Good OpenCv Tutorials\n    * [https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html](https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html)\n    * [https://realpython.com/python-opencv-color-spaces](https://realpython.com/python-opencv-color-spaces)\n    * [https://pyimagesearch.com](https://pyimagesearch.com)\n    * [https://www.learnopencv.com](https://www.learnopencv.com)"
