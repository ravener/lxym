
package pages

const Set_Theory = "Set theory is a branch of mathematics that studies sets, their operations, and their properties.\n\n* A set is a collection of disjoint items.\n\n## Basic symbols\n\n### Operators\n* the union operator, `∪`, pronounced \"cup\", means \"or\";\n* the intersection operator, `∩`, pronounced \"cap\", means \"and\";\n* the exclusion operator, `\\`, means \"without\";\n* the compliment operator, `'`, means \"the inverse of\";\n* the cross operator, `×`, means \"the Cartesian product of\".\n\n### Qualifiers \n* the colon qualifier, `:`, means \"such that\";\n* the membership qualifier, `∈`, means \"belongs to\";\n* the subset qualifier, `⊆`, means \"is a subset of\";\n* the proper subset qualifier, `⊂`, means \"is a subset of but is not equal to\".\n\n### Canonical sets\n* `∅`, the empty set, i.e. the set containing no items;\n* `ℕ`, the set of all natural numbers;\n* `ℤ`, the set of all integers;\n* `ℚ`, the set of all rational numbers;\n* `ℝ`, the set of all real numbers.\n\nThere are a few caveats to mention regarding the canonical sets:\n1. Even though the empty set contains no items, the empty set is a subset of itself (and indeed every other set);\n2. Mathematicians generally do not universally agree on whether zero is a natural number, and textbooks will typically explicitly state whether or not the author considers zero to be a natural number.\n\n\n### Cardinality\n\nThe cardinality, or size, of a set is determined by the number of items in the set. The cardinality operator is given by a double pipe, `|...|`.\n\nFor example, if `S = { 1, 2, 4 }`, then `|S| = 3`.\n\n### The Empty Set\n* The empty set can be constructed in set builder notation using impossible conditions, e.g. `∅ = { x : x =/= x }`, or `∅ = { x : x ∈ N, x < 0 }`;\n* the empty set is always unique (i.e. there is one and only one empty set);\n* the empty set is a subset of all sets;\n* the cardinality of the empty set is 0, i.e. `|∅| = 0`.\n\n## Representing sets\n\n### Literal Sets\n\nA set can be constructed literally by supplying a complete list of objects contained in the set. For example, `S = { a, b, c, d }`.\n\nLong lists may be shortened with ellipses as long as the context is clear. For example, `E = { 2, 4, 6, 8, ... }` is clearly the set of all even numbers, containing an infinite number of objects, even though we've only explicitly written four of them.\n\n### Set Builder\n\nSet builder notation is a more descriptive way of constructing a set. It relies on a _subject_ and a _predicate_ such that `S = { subject : predicate }`. For example,\n\n```\nA = { x : x is a vowel } = { a, e, i, o, u, y}\nB = { x : x ∈ N, x < 10 } = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\nC = { x : x = 2k, k ∈ N } = { 0, 2, 4, 6, 8, ... }\n```\n\nSometimes the predicate may \"leak\" into the subject, e.g.\n\n```\nD = { 2x : x ∈ N } = { 0, 2, 4, 6, 8, ... }\n```\n\n## Relations\n\n### Membership\n\n* If the value `a` is contained in the set `A`, then we say `a` belongs to `A` and represent this symbolically as `a ∈ A`.\n* If the value `a` is not contained in the set `A`, then we say `a` does not belong to `A` and represent this symbolically as `a ∉ A`.\n\n### Equality\n\n* If two sets contain the same items then we say the sets are equal, e.g. `A = B`.\n* Order does not matter when determining set equality, e.g. `{ 1, 2, 3, 4 } = { 2, 3, 1, 4 }`.\n* Sets are disjoint, meaning elements cannot be repeated, e.g. `{ 1, 2, 2, 3, 4, 3, 4, 2 } = { 1, 2, 3, 4 }`.\n* Two sets `A` and `B` are equal if and only if `A ⊆ B` and `B ⊆ A`.\n\n## Special Sets\n\n### The Power Set\n* Let `A` be any set. The set that contains all possible subsets of `A` is called a \"power set\" and is written as `P(A)`. If the set `A` contains `n` elements, then `P(A)` contains `2^N` elements.\n\n```\nP(A) = { x : x ⊆ A }\n```\n\n## Set operations among two sets\n### Union\nGiven two sets `A` and `B`, the union of the two sets are the items that appear in either `A` or `B`, written as `A ∪ B`.\n\n```\nA ∪ B = { x : x ∈ A ∪ x ∈ B }\n```\n\n### Intersection\nGiven two sets `A` and `B`, the intersection of the two sets are the items that appear in both `A` and `B`, written as `A ∩ B`.\n\n```\nA ∩ B = { x : x ∈ A, x ∈ B }\n```\n\n### Difference\nGiven two sets `A` and `B`, the set difference of `A` with `B` is every item in `A` that does not belong to `B`.\n\n```\nA \\ B = { x : x ∈ A, x ∉ B }\n```\n\n### Symmetrical difference\nGiven two sets `A` and `B`, the symmetrical difference is all items among `A` and `B` that doesn't appear in their intersections.\n\n```\nA △ B = { x : ((x ∈ A) ∩ (x ∉ B)) ∪ ((x ∈ B) ∩ (x ∉ A)) }\n\nA △ B = (A \\ B) ∪ (B \\ A)\n```\n\n### Cartesian product\nGiven two sets `A` and `B`, the cartesian product between `A` and `B` consists of a set containing all combinations of items of `A` and `B`.\n\n```\nA × B = { (x, y) | x ∈ A, y ∈ B }\n```"
