
package pages

const Pythonstatcomp = "This is a tutorial on how to do some typical statistical programming tasks using Python. It's intended for people basically familiar with Python and experienced at statistical programming in a language like R, Stata, SAS, SPSS, or MATLAB.\n\n```python\n\n\n\n# 0. Getting set up ====\n\n\"\"\" To get started, pip install the following: jupyter, numpy, scipy, pandas,\n    matplotlib, seaborn, requests.\n        Make sure to do this tutorial in a Jupyter notebook so that you get\n    the inline plots and easy documentation lookup. The shell command to open \n    one is simply `jupyter notebook`, then click New -> Python.\n\"\"\"\n\n# 1. Data acquisition ====\n\n\"\"\" One reason people choose Python over R is that they intend to interact a lot\n    with the web, either by scraping pages directly or requesting data through\n    an API. You can do those things in R, but in the context of a project\n    already using Python, there's a benefit to sticking with one language.\n\"\"\"\n\nimport requests  # for HTTP requests (web scraping, APIs)\nimport os\n\n# web scraping\nr = requests.get(\"https://github.com/adambard/learnxinyminutes-docs\")\nr.status_code  # if 200, request was successful\nr.text  # raw page source\nprint(r.text)  # prettily formatted\n# save the page source in a file:\nos.getcwd()  # check what's the working directory\nwith open(\"learnxinyminutes.html\", \"wb\") as f:\n    f.write(r.text.encode(\"UTF-8\"))\n\n# downloading a csv\nfp = \"https://raw.githubusercontent.com/adambard/learnxinyminutes-docs/master/\"\nfn = \"pets.csv\"\nr = requests.get(fp + fn)\nprint(r.text)\nwith open(fn, \"wb\") as f:\n    f.write(r.text.encode(\"UTF-8\"))\n\n\"\"\" for more on the requests module, including APIs, see\n    http://docs.python-requests.org/en/latest/user/quickstart/\n\"\"\"\n\n# 2. Reading a CSV file ====\n\n\"\"\" Wes McKinney's pandas package gives you 'DataFrame' objects in Python. If\n    you've used R, you will be familiar with the idea of the \"data.frame\" already.\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nimport scipy as sp\npets = pd.read_csv(fn)\npets\n#        name  age  weight species\n# 0    fluffy    3      14     cat\n# 1  vesuvius    6      23    fish\n# 2       rex    5      34     dog\n\n\"\"\" R users: note that Python, like most C-influenced programming languages, starts\n    indexing from 0. R starts indexing at 1 due to Fortran influence.\n\"\"\"\n\n# two different ways to print out a column\npets.age\npets[\"age\"]\n\npets.head(2)  # prints first 2 rows\npets.tail(1)  # prints last row\n\npets.name[1]  # 'vesuvius'\npets.species[0]  # 'cat'\npets[\"weight\"][2]  # 34\n\n# in R, you would expect to get 3 rows doing this, but here you get 2:\npets.age[0:2]\n# 0    3\n# 1    6\n\nsum(pets.age) * 2  # 28\nmax(pets.weight) - min(pets.weight)  # 20\n\n\"\"\" If you are doing some serious linear algebra and number-crunching, you may\n    just want arrays, not DataFrames. DataFrames are ideal for combining columns\n    of different types.\n\"\"\"\n\n# 3. Charts ====\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# To do data visualization in Python, use matplotlib\n\nplt.hist(pets.age);\n\nplt.boxplot(pets.weight);\n\nplt.scatter(pets.age, pets.weight)\nplt.xlabel(\"age\")\nplt.ylabel(\"weight\");\n\n# seaborn sits atop matplotlib and makes plots prettier\n\nimport seaborn as sns\n\nplt.scatter(pets.age, pets.weight)\nplt.xlabel(\"age\")\nplt.ylabel(\"weight\");\n\n# there are also some seaborn-specific plotting functions\n# notice how seaborn automatically labels the x-axis on this barplot\nsns.barplot(pets[\"age\"])\n\n# R veterans can still use ggplot\nfrom ggplot import *\nggplot(aes(x=\"age\",y=\"weight\"), data=pets) + geom_point() + labs(title=\"pets\")\n# source: https://pypi.python.org/pypi/ggplot\n\n# there's even a d3.js port: https://github.com/mikedewar/d3py\n\n# 4. Simple data cleaning and exploratory analysis ====\n\n\"\"\" Here's a more complicated example that demonstrates a basic data\n    cleaning workflow leading to the creation of some exploratory plots\n    and the running of a linear regression.\n        The data set was transcribed from Wikipedia by hand. It contains\n    all the Holy Roman Emperors and the important milestones in their lives\n    (birth, death, coronation, etc.).\n        The goal of the analysis will be to explore whether a relationship\n    exists between emperor birth year and emperor lifespan.\n    data source: https://en.wikipedia.org/wiki/Holy_Roman_Emperor\n\"\"\"\n\n# load some data on Holy Roman Emperors\nurl = \"https://raw.githubusercontent.com/adambard/learnxinyminutes-docs/master/hre.csv\"\nr = requests.get(url)\nfp = \"hre.csv\"\nwith open(fp, \"wb\") as f:\n    f.write(r.text.encode(\"UTF-8\"))\n\nhre = pd.read_csv(fp)\n\nhre.head()\n\"\"\"\n   Ix      Dynasty        Name        Birth             Death\n0 NaN  Carolingian   Charles I  2 April 742    28 January 814\n1 NaN  Carolingian     Louis I          778       20 June 840\n2 NaN  Carolingian   Lothair I          795  29 September 855\n3 NaN  Carolingian    Louis II          825     12 August 875\n4 NaN  Carolingian  Charles II  13 June 823     6 October 877\n\n       Coronation 1   Coronation 2 Ceased to be Emperor\n0   25 December 800            NaN       28 January 814\n1  11 September 813  5 October 816          20 June 840\n2       5 April 823            NaN     29 September 855\n3        Easter 850     18 May 872        12 August 875\n4   29 December 875            NaN        6 October 877\n\"\"\"\n\n# clean the Birth and Death columns\n\nimport re  # module for regular expressions\n\nrx = re.compile(r'\\d+$')  # match trailing digits\n\n\"\"\" This function applies the regular expression to an input column (here Birth,\n    Death), flattens the resulting list, converts it to a Series object, and\n    finally converts the type of the Series object from string to integer. For\n    more information into what different parts of the code do, see:\n      - https://docs.python.org/2/howto/regex.html\n      - http://stackoverflow.com/questions/11860476/how-to-unlist-a-python-list\n      - http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html\n\"\"\"\n\nfrom functools import reduce\n\ndef extractYear(v):\n    return(pd.Series(reduce(lambda x, y: x + y, map(rx.findall, v), [])).astype(int))\n\nhre[\"BirthY\"] = extractYear(hre.Birth)\nhre[\"DeathY\"] = extractYear(hre.Death)\n\n# make a column telling estimated age\nhre[\"EstAge\"] = hre.DeathY.astype(int) - hre.BirthY.astype(int)\n\n# simple scatterplot, no trend line, color represents dynasty\nsns.lmplot(\"BirthY\", \"EstAge\", data=hre, hue=\"Dynasty\", fit_reg=False)\n\n# use scipy to run a linear regression\nfrom scipy import stats\n(slope, intercept, rval, pval, stderr) = stats.linregress(hre.BirthY, hre.EstAge)\n# code source: http://wiki.scipy.org/Cookbook/LinearRegression\n\n# check the slope\nslope  # 0.0057672618839073328\n\n# check the R^2 value:\nrval**2  # 0.020363950027333586\n\n# check the p-value\npval  # 0.34971812581498452\n\n# use seaborn to make a scatterplot and plot the linear regression trend line\nsns.lmplot(\"BirthY\", \"EstAge\", data=hre)\n\n\"\"\" For more information on seaborn, see\n      - http://web.stanford.edu/~mwaskom/software/seaborn/\n      - https://github.com/mwaskom/seaborn\n    For more information on SciPy, see\n      - http://wiki.scipy.org/SciPy\n      - http://wiki.scipy.org/Cookbook/\n    To see a version of the Holy Roman Emperors analysis using R, see\n      - http://github.com/e99n09/R-notes/blob/master/holy_roman_emperors_dates.R\n\"\"\"\n\n```\n\nIf you want to learn more, get _Python for Data Analysis_ by Wes McKinney. It's a superb resource and I used it as a reference when writing this tutorial.\n\nYou can also find plenty of interactive IPython tutorials on subjects specific to your interests, like Cam Davidson-Pilon's <a href=\"http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/\" Title=\"Probabilistic Programming and Bayesian Methods for Hackers\">Probabilistic Programming and Bayesian Methods for Hackers</a>.\n\nSome more modules to research:\n   - text analysis and natural language processing: nltk, http://www.nltk.org\n   - social network analysis: igraph, http://igraph.org/python/"
