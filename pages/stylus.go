
package pages

const Stylus = "Stylus is a dynamic stylesheet preprocessor language that is compiled into CSS. It aims to add functionality to CSS without breaking compatibility across web browsers.\nIt does this using variables, nesting, mixins, functions and more.\n\nStylus syntax is very flexible. You can use standard CSS syntax and leave the semicolon (;), colon (:) and even the ({) and (}) optional, making your code even more readable.\n\nStylus does not provide new style options, but gives functionality that lets you make your CSS much more dynamic.\n\n```scss\n\n/* Code style\n==============================*/\n\n/* Keys, semicolon, and colon are optional in Stylus. */\n\nbody {\n  background: #000;\n}\n\nbody {\n  background: #000\n}\n\nbody {\n  background #000\n}\n\nbody\n  background #000\n\nbody\n  background: #000;\n\nbody\n  background: #000\n\n// Single-line comments are removed when Stylus is compiled into CSS.\n\n/* Multi-line comments are preserved. */\n\n\n/* Selectors\n==============================*/\n\n/* Selecting elements within another element */\nbody {\n  background: #000000;\n  h1 {\n    color: #FF0000;\n  }\n}\n\n/* Or if you prefer... */\nbody\n  background #000000\n  h1\n    color #FF0000\n\n\n/* Getting parent element reference\n==============================*/\na {\n  color: #0088dd;\n  &:hover {\n    color: #DD8800;\n  }\n}\n\n\n/* Variables\n==============================*/\n\n\n/*\n  You can store a CSS value (such as the color) of a variable.\n  Although it is optional, it is recommended to add $ before a variable name\n  so you can distinguish a variable from another CSS value.\n*/\n\n$primary-color = #A3A4FF\n$secondary-color = #51527F\n$body-font = 'Roboto', sans-serif\n\n/* You can use variables throughout your style sheet.\nNow, if you want to change the color, you only have to make the change once. */\n\nbody\n\tbackground-color $primary-color\n\tcolor $secondary-color\n\tfont-family $body-font\n\n/* After compilation: */\nbody {\n\tbackground-color: #A3A4FF;\n\tcolor: #51527F;\n\tfont-family: 'Roboto', sans-serif;\n}\n\n/ *\nThis is much easier to maintain than having to change color\neach time it appears throughout your style sheet.\n* /\n\n\n/* Mixins\n==============================*/\n\n/* If you find that you are writing the same code for more than one\nelement, you may want to store that code in a mixin.\n\ncenter()\n  display block\n\tmargin-left auto\n\tmargin-right auto\n\tleft 0\n\tright 0\n\n/* Using the mixin */\nbody {\n  center()\n  background-color: $primary-color\n}\n\n/* After compilation: */\ndiv {\n\tdisplay: block;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\tleft: 0;\n\tright: 0;\n\tbackground-color: #A3A4FF;\n}\n\n/* You can use mixins to create a shorthand property. */\n\nsize($width, $height)\n  width $width\n  height $height\n\n.rectangle\n  size(100px, 60px)\n\n.square\n\tsize(40px, 40px)\n\n/* You can use a mixin as a CSS property. */\ncircle($ratio)\n  width $ratio * 2\n  height $ratio * 2\n  border-radius $ratio\n\n.ball\n  circle 25px\n\n\n/* Interpolation\n==============================*/\n\nvendor(prop, args)\n  -webkit-{prop} args\n  -moz-{prop} args\n  {prop} args\n\nborder-radius()\n  vendor('border-radius', arguments)\n\nbox-shadow()\n  vendor('box-shadow', arguments)\n\nbutton\n  border-radius 1px 2px / 3px 4px\n\n\n/* Functions\n==============================*/\n\n/* Functions in Stylus allow you to perform a variety of tasks, such as recalling some data. */\n\nbody {\n  background darken(#0088DD, 50%) // Dim color #0088DD by 50%\n}\n\n/* Creating your own function */\nadd(a, b)\n  a + b\n\nbody\n  padding add(10px, 5)\n\n\n/* Conditions\n==============================*/\ncompare(a, b)\n  if a > b\n    bigger\n  else if a < b\n    smaller\n  else\n    equal\n\ncompare(5, 2)   // => bigger\ncompare(1, 5)   // => smaller\ncompare(10, 10) // => equal\n\n\n/* Iterations\n==============================*/\n\n/*\nRepeat loop syntax for:\nfor <val-name> [, <key-name>] in <expression>\n*/\n\nfor $item in (1..2) /* Repeat block 12 times */\n  .col-{$item}\n    width ($item / 12) * 100% /* Calculate row by column number */\n```\n\nNow that you know a little about this powerful CSS preprocessor, you're ready to create more dynamic style sheets. To learn more, visit the official stylus documentation at http://stylus-lang.com."
