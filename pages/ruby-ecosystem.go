
package pages

const Ruby_Ecosystem = "People using Ruby generally have a way to install different Ruby versions,\nmanage their packages (or gems), and manage their gem dependencies.\n\n## Ruby Versions\n\nRuby was created by Yukihiro \"Matz\" Matsumoto, who remains somewhat of a\n[BDFL](https://en.wikipedia.org/wiki/Benevolent_Dictator_for_Life), although\nthat is changing recently. As a result, the reference implementation of Ruby is\ncalled MRI (Matz' Reference Implementation), and when you hear a Ruby version,\nit is referring to the release version of MRI.\n\nNew major versions of Ruby are traditionally released on Christmas Day. The current major version (25 December 2017) is 2.5. The most popular stable versions are 2.4.4 and 2.3.7 (both released 28 March 2018).\n\n## Ruby Managers\n\nSome platforms have Ruby pre-installed or available as a package. Most rubyists\ndo not use these, or if they do, they only use them to bootstrap another Ruby\ninstaller or implementation. Instead rubyists tend to install a Ruby manager to\ninstall and switch between many versions of Ruby and their projects' Ruby\nenvironments.\n\nThe following are the popular Ruby environment managers:\n\n* [RVM](https://rvm.io/) - Installs and switches between rubies. RVM also has\n  the concept of gemsets to isolate projects' environments completely.\n* [ruby-build](https://github.com/sstephenson/ruby-build) - Only installs\n  rubies. Use this for finer control over your rubies' installations.\n* [rbenv](https://github.com/sstephenson/rbenv) - Only switches between rubies.\n  Used with ruby-build.  Use this for finer control over how rubies load.\n* [chruby](https://github.com/postmodern/chruby) - Only switches between rubies.\n  Similar in spirit to rbenv. Unopinionated about how rubies are installed.\n\n## Ruby Implementations\n\nThe Ruby ecosystem enjoys many different implementations of Ruby, each with\nunique strengths and states of compatibility. To be clear, the different\nimplementations are written in different languages, but *they are all Ruby*.\nEach implementation has special hooks and extra features, but they all run\nnormal Ruby files well. For instance, JRuby is written in Java, but you do\nnot need to know Java to use it.\n\nVery mature/compatible:\n\n* [MRI](https://github.com/ruby/ruby) - Written in C, this is the reference implementation of Ruby. By\n  definition it is 100% compatible (with itself). All other rubies\nmaintain compatibility with MRI (see [RubySpec](#rubyspec) below).\n* [JRuby](http://jruby.org/) - Written in Java and Ruby, this robust implementation is quite fast.\n  Most importantly, JRuby's strength is JVM/Java interop, leveraging existing\nJVM tools, projects, and languages.\n* [Rubinius](http://rubini.us/) - Written primarily in Ruby itself with a C++ bytecode VM. Also\n  mature and fast. Because it is implemented in Ruby itself, it exposes many VM\nfeatures into rubyland.\n\nMedium mature/compatible:\n\n* [Maglev](http://maglev.github.io/) - Built on top of Gemstone, a Smalltalk VM. Smalltalk has some\n  impressive tooling, and this project tries to bring that into Ruby\ndevelopment.\n* [RubyMotion](http://www.rubymotion.com/) - Brings Ruby to iOS development.\n\nLess mature/compatible:\n\n* [Topaz](http://topazruby.com/) - Written in RPython (using the PyPy toolchain), Topaz is fairly young\n  and not yet compatible. It shows promise to be a high-performance Ruby\nimplementation.\n* [IronRuby](http://ironruby.net/) - Written in C# targeting the .NET platform, work on IronRuby seems\n  to have stopped since Microsoft pulled their support.\n\nRuby implementations may have their own release version numbers, but they always\ntarget a specific version of MRI for compatibility. Many implementations have\nthe ability to enter different modes (for example, 1.8 or 1.9 mode) to specify\nwhich MRI version to target.\n\n## RubySpec\n\nMost Ruby implementations rely heavily on [RubySpec](http://rubyspec.org/). Ruby\nhas no official specification, so the community has written executable specs in\nRuby to test their implementations' compatibility with MRI.\n\n## RubyGems\n\n[RubyGems](http://rubygems.org/) is a community-run package manager for Ruby.\nRubyGems ships with Ruby, so there is no need to download it separately.\n\nRuby packages are called \"gems,\" and they can be hosted by the community at\nRubyGems.org. Each gem contains its source code and some metadata, including\nthings like version, dependencies, author(s), and license(s).\n\n## Bundler\n\n[Bundler](http://bundler.io/) is a gem dependency resolver. It uses a project's\nGemfile to find dependencies, and then fetches those dependencies' dependencies\nrecursively. It does this until all dependencies are resolved and downloaded, or\nit will stop if a conflict has been found.\n\nBundler will raise an error if it finds conflicting dependencies. For example,\nif gem A requires version 3 or greater of gem Z, but gem B requires version 2,\nBundler will notify you of the conflict. This becomes extremely helpful as many\ngems refer to other gems (which refer to other gems), which can form a large\ndependency graph to resolve.\n\n# Testing\n\nTesting is a large part of Ruby culture. Ruby comes with its own Unit-style\ntesting framework called minitest (Or TestUnit for Ruby version 1.8.x). There\nare many testing libraries with different goals.\n\n* [TestUnit](http://ruby-doc.org/stdlib-1.8.7/libdoc/test/unit/rdoc/Test/Unit.html) - Ruby 1.8's built-in \"Unit-style\" testing framework\n* [minitest](http://ruby-doc.org/stdlib-2.0.0/libdoc/minitest/rdoc/MiniTest.html) - Ruby 1.9/2.0's built-in testing framework\n* [RSpec](http://rspec.info/) - A testing framework that focuses on expressivity\n* [Cucumber](http://cukes.info/) - A BDD testing framework that parses Gherkin formatted tests\n\n## Be Nice\n\nThe Ruby community takes pride in being an open, diverse, welcoming community.\nMatz himself is extremely friendly, and the generosity of rubyists on the whole\nis amazing."
