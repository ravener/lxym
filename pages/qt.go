
package pages

const Qt = "**Qt** is a widely-known framework for developing cross-platform software that can be run on various software and hardware platforms with little or no change in the code, while having the power and speed of native applications. Though **Qt** was originally written in *C++*, there are its ports to other languages: *[PyQt](https://learnxinyminutes.com/docs/pyqt/)*, *QtRuby*, *PHP-Qt*, etc.\n\n**Qt** is great for creating applications with graphical user interface (GUI). This tutorial is how to do it in *C++*.\n\n```c++\n/*\n * Let's start classically\n */\n\n// all headers from Qt framework start with capital letter 'Q'\n#include <QApplication>\n#include <QLineEdit>\n\nint main(int argc, char *argv[]) {\n\t // create an object to manage application-wide resources\n    QApplication app(argc, argv);\n\n    // create line edit widget and show it on screen\n    QLineEdit lineEdit(\"Hello world!\");\n    lineEdit.show();\n\n    // start the application's event loop\n    return app.exec();\n}\n```\n\nGUI-related part of **Qt** is all about *widgets* and *connections* between them.\n\n[READ MORE ABOUT WIDGETS](http://doc.qt.io/qt-5/qtwidgets-index.html)\n\n```c++\n/*\n * Let's create a label and a button.\n * A label should appear when a button is pressed.\n * \n * Qt code is speaking for itself.\n */\n \n#include <QApplication>\n#include <QDialog>\n#include <QVBoxLayout>\n#include <QPushButton>\n#include <QLabel>\n\nint main(int argc, char *argv[]) {\n    QApplication app(argc, argv);\n\n    QDialog dialogWindow;\n    dialogWindow.show();\n    \n    // add vertical layout \n    QVBoxLayout layout;\n    dialogWindow.setLayout(&layout);  \n\n    QLabel textLabel(\"Thanks for pressing that button\");\n    layout.addWidget(&textLabel);\n    textLabel.hide();\n\n    QPushButton button(\"Press me\");\n    layout.addWidget(&button);\n    \n    // show hidden label when the button is pressed\n    QObject::connect(&button, &QPushButton::pressed,\n                     &textLabel, &QLabel::show);\n\n    return app.exec();\n}\n```\n\nNotice that *QObject::connect* part. This method is used to connect *SIGNALS* of one objects to *SLOTS* of another.\n\n**Signals** are being emitted when certain things happen with objects, like *pressed* signal is emitted when user presses on QPushButton object.\n\n**Slots** are *actions* that might be performed in response to received signals.\n\n[READ MORE ABOUT SLOTS AND SIGNALS](http://doc.qt.io/qt-5/signalsandslots.html)\n\n\nNext, let's learn that we can not only use standard widgets but also extend their behaviour using inheritance. Let's create a button and count how many times it was pressed. For this purpose we define our own class *CounterLabel*.  It must be declared in separate file because of specific Qt architecture.\n\n```c++\n// counterlabel.hpp\n\n#ifndef COUNTERLABEL\n#define COUNTERLABEL\n\n#include <QLabel>\n\nclass CounterLabel : public QLabel {\n    Q_OBJECT  // Qt-defined macros that must be present in every custom widget\n\npublic:\n    CounterLabel() : counter(0) {\n        setText(\"Counter has not been increased yet\");  // method of QLabel\n    }\n\npublic slots:\n    // action that will be called in response to button press\n    void increaseCounter() {\n        setText(QString(\"Counter value: %1\").arg(QString::number(++counter)));\n    }\n\nprivate:\n    int counter;\n};\n\n#endif // COUNTERLABEL\n```\n\n```c++\n// main.cpp\n// Almost the same as in previous example\n\n#include <QApplication>\n#include <QDialog>\n#include <QVBoxLayout>\n#include <QPushButton>\n#include <QString>\n#include \"counterlabel.hpp\"\n\nint main(int argc, char *argv[]) {\n    QApplication app(argc, argv);\n\n    QDialog dialogWindow;\n    dialogWindow.show();\n\n    QVBoxLayout layout;\n    dialogWindow.setLayout(&layout);\n\n    CounterLabel counterLabel;\n    layout.addWidget(&counterLabel);\n\n    QPushButton button(\"Push me once more\");\n    layout.addWidget(&button);\n    QObject::connect(&button, &QPushButton::pressed,\n                     &counterLabel, &CounterLabel::increaseCounter);\n\n    return app.exec();\n}\n```\n\nThat's it! Of course, Qt framework is much much larger than the part that was covered in this tutorial, so be ready to read and practice.\n\n## Further reading\n\n- [Qt 4.8 tutorials](http://doc.qt.io/qt-4.8/tutorials.html)\n- [Qt 5 tutorials](http://doc.qt.io/qt-5/qtexamplesandtutorials.html)\n\nGood luck and have fun!"
