
package pages

const Red = "Red was created out of the need to get work done, and the tool the author wanted to use, the language of REBOL, had a couple of drawbacks.\nIt was not Open Sourced at that time and it is an interpreted language, what means that it is on average slow compared to a compiled language.\n\nRed, together with its C-level dialect Red/System, provides a language that covers the entire programming space you ever need to program something in.\nRed is a language heavily based on the language of REBOL. Where Red itself reproduces the flexibility of the REBOL language, the underlying language Red will be built upon,\nRed/System, covers the more basic needs of programming like C can, being closer to the metal.\n\nRed will be the world's first Full Stack Programming Language. This means that it will be an effective tool to do (almost) any programming task on every level\nfrom the metal to the meta without the aid of other stack tools.\nFurthermore Red will be able to cross-compile Red source code without using any GCC like toolchain\nfrom any platform to any other platform. And it will do this all from a binary executable that is supposed to stay under 1 MB.\n\nReady to learn your first Red?\n\n```\nAll text before the header will be treated as comment, as long as you avoid\nusing the word \"red\" starting with a capital \"R\" in this pre-header text.\nThis is a temporary shortcoming of the used lexer but most of the time you\nstart your script or program with the header itself.\n\nThe header of a red script is the capitalized word \"red\" followed by a\nwhitespace character followed by a block of square brackets []. The block of\nbrackets can be filled with useful information about this script or program:\nthe author's name, the filename, the version, the license, a summary of what\nthe program does or any other files it needs. The red/System header is just\nlike the red header, only saying \"red/System\" and not \"red\".\n```\n```red\nRed []\n\n;this is a commented line\n\nprint \"Hello Red World\"    ; this is another comment\n\ncomment {\n    This is a multiline comment.\n    You just saw the Red version of the \"Hello World\" program.\n}\n\n; Your program's entry point is the first executable code that is found\n; no need to restrict this to a 'main' function.\n\n; Valid variable names start with a letter and can contain numbers,\n; variables containing only capital A through F and numbers and ending with 'h'\n; are forbidden, because that is how hexadecimal numbers are expressed in Red\n; and Red/System.\n\n; assign a value to a variable using a colon \":\"\nmy-name: \"Red\"\nreason-for-using-the-colon: {Assigning values using the colon makes\n the equality sign \"=\" exclusively usable for comparisons purposes,\n exactly what \"=\" was intended for in the first place!\n Remember this y = x + 1 and x = 1 => y = 2 stuff from school?\n}\nis-this-name-valid?: true\n\n; print output using print, or prin for printing without a newline or linefeed\n; at the end of the printed text.\n\nprin \" My name is \" print my-name\nMy name is Red\n\nprint [\"My name is \" my-name lf]\nMy name is Red\n\n; If you haven't already noticed: statements do NOT end with a semicolon ;-)\n\n;\n; Datatypes\n;\n; If you know Rebol, you probably have noticed it has lots of datatypes. Red\n; does not have yet all those types, but as Red want to be close to Rebol it\n; will have a lot of datatypes.\n; You can recognize types by the exclamation sign at the end. But beware\n; names ending with an exclamation sign are allowed.\n; Some of the available types are integer! string! block!\n\n; Declaring variables before using them?\n; Red knows by itself what variable is best to use for the data you want to\n; use it for.\n; A variable declaration is not always necessary.\n; It is considered good coding practise to declare your variables,\n; but it is not forced upon you by Red.\n; You can declare a variable and specify its type. a variable's type\n; determines its size in bytes.\n\n; Variables of integer! type are usually 4 bytes or 32 bits\nmy-integer: 0\n; Red's integers are signed. No support for unsigned atm but that will come.\n\n; To find out the type of variable use type?\ntype? my-integer\ninteger!\n\n; A variable can be initialized using another variable that gets initialized\n; at the same time. Initialize here refers to both declaring a variable and\n; assigning a value to it.\ni2: 1 + i1: 1\n\n; Arithmetic is straightforward\ni1 + i2 ; result 3\ni2 - i1 ; result 1\ni2 * i1 ; result 2\ni1 / i2 ; result 0 (0.5, but truncated towards 0)\n\n; Comparison operators are probably familiar, and unlike in other languages\n; you only need a single '=' sign for comparison. Inequality is '<>' like in Pascal.\n; There is a boolean like type in Red. It has values true and false, but also\n; the values on/off or yes/no can be used\n\n3 = 2 ; result false\n3 <> 2 ; result true\n3 > 2 ; result true\n3 < 2 ; result false\n2 <= 2 ; result true\n2 >= 2 ; result true\n\n;\n; Control Structures\n;\n; if\n; Evaluate a block of code if a given condition is true. IF returns\n; the resulting value of the block or 'none' if the condition was false.\nif a < 0 [print \"a is negative\"]\n\n; either\n; Evaluate a block of code if a given condition is true, else evaluate an\n; alternative block of code. If the last expressions in both blocks have the\n; same type, EITHER can be used inside an expression.\neither a > 0 [\n   msg: \"positive\"\n][\n   either a = 0 [\n       msg: \"zero\"\n   ][\n       msg: \"negative\"\n   ]\n]\n\nprint [\"a is \" msg lf]\n\n; There is an alternative way to write this\n; (Which is allowed because all code paths return a value of the same type):\n\nmsg: either a > 0 [\n   \"positive\"\n][\n   either a = 0 [\n       \"zero\"\n   ][\n       \"negative\"\n   ]\n]\nprint [\"a is \" msg lf]\n\n; until\n; Loop over a block of code until the condition at end of block, is met.\n; UNTIL always returns the 'true' value from the final evaluation of the last expression.\nc: 5\nuntil [\n   prin \"o\"\n   c: c - 1\n   c = 0    ; the condition to end the until loop\n]\n;   will output:\nooooo\n; Note that the loop will always be evaluated at least once, even if the\n; condition is not met from the beginning.\n\n; while\n; While a given condition is met, evaluate a block of code.\n; WHILE does not return any value, so it cannot be used in an expression.\nc: 5\nwhile [c > 0][\n   prin \"o\"\n   c: c - 1\n]\n; will output:\nooooo\n\n;\n; Functions\n;\n; function example\ntwice: function [a [integer!] /one return: [integer!]][\n        c: 2\n        a: a * c\n        either one [a + 1][a]\n]\nb: 3\nprint twice b   ; will output 6.\n\n; Import external files with #include and filenames start with a % sign\n#include %includefile.red\n; Now the functions in the included file can be used too.\n\n```\n\n## Further Reading\n\nThe main source for information about Red is the [Red language homepage](http://www.red-lang.org).\n\nThe source can be found on [github](https://github.com/red/red).\n\nThe Red/System language specification can be found [here](http://static.red-lang.org/red-system-specs-light.html).\n\nTo learn more about Rebol and Red join the [chat on Gitter](https://gitter.im/red/red). And if that is not working for you drop a mail to us on the [Red mailing list](mailto: red-langNO_SPAM@googlegroups.com) (remove NO_SPAM).\n\nBrowse or ask questions on [Stack Overflow](https://stackoverflow.com/questions/tagged/red).\n\nMaybe you want to try Red right away? That is possible on the [try Rebol and Red site](http://tryrebol.esperconsultancy.nl).\n\nYou can also learn Red by learning some [Rebol](http://www.rebol.com/docs.html)."
