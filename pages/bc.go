
package pages

const Bc = "```c\n/*This is a multi-\nline comment.*/\n# This is also a (one-line) comment! (in GNU bc).\n\n    /*1. Variables and control structures*/\nnum = 45 /*All variables save only doubles, and you cannot save\n    string constants directly.*/\nnum = 45; /*You can choose to add a semicolon after\n    every statement. This is optional.*/\n/*Blocks are denoted using the {} operators(similar to C):*/\nwhile(num < 50) {\n    num += 1 /*equivalent to num=num+1.\n    a = a op b is equivalent to a op= b.*/\n}\n/*And there are ++(increment) and --(decrement) operators.*/\n/*There are 3 special variables:\nscale: defines the scale of the double numbers.\nibase: defines the base of input.\nobase: defines the base of output.*/\n/*If clauses:*/\nhour = read() /*Input a number*/\n\nif(hour < 12) { /*Operators are exactly like C.*/\n    print \"Good morning\\n\" /*\"print\" outputs strings or variables\n\tseparated by commas.*/\n} else if(hour == 12) {\n    print \"Hello\\n\"\n    /*Escaping sequences start with a \\ in a string.\n    In order to make the escaping sequences clearer, here\n\tis a simplified list of them that will work in bc:\n    \\b: backspace\n    \\c: carriage return\n    \\n: newline\n    \\t: tab\n    \\\\: backslash*/\n} else {\n    /*Variables are global by default.*/\n    thisIsGlobal = 5\n    /*You can make a variable local. Use the \"auto\" keyword in a function.*/\n}\n\n/*Every variable is pre-set to 0.*/\nnum = blankVariable /*num is set to 0.*/\n\n/*Like C, only 0 is falsy.*/\nif(!num) {print \"false\\n\"}\n\n/*Unlike C, bc does not have the ?: operators. For example,\n this block of code will cause an error:\na = (num) ? 1 : 0\nHowever, you can simulate one:*/\na = (num) && (1) || (0) /*&& is and, || is or*/\n\n/*For loops*/\nnum = 0\nfor(i = 1; i <= 100; i++) {/*Similar to the C for loop.*/\n    num += i\n}\n\n    /*2.Functions and Arrays*/\ndefine fac(n) { /*define a function using define.*/\n    if(n == 1 || n == 0) {\n        return 1 /*return a value*/\n    }\n    return n * fac(n - 1) /*recursion is possible*/\n}\n\n/*Closures and anonymous functions are impossible.*/\n\nnum = fac(4) /*24*/\n\n/*This is an example of local variables:*/\ndefine x(n) {\n    auto x\n    x = 1\n    return n + x\n}\nx(3) /*4*/\nprint x /*It turns out that x is not accessible out of the function.*/\n/*Arrays are equivalent to the C array.*/\nfor(i = 0; i <= 3; i++) {\n    a[i] = 1\n}\n/*Access it like this:*/\nprint a[0], \" \", a[1], \" \", a[2], \" \", a[3], \"\\n\"\nquit /*Add this line of code to make sure\nthat your program exits. This line of code is optional.*/\n```\nEnjoy this simple calculator! (Or this programming language, to be exact.)\n\nThis whole program is written in GNU bc. To run it, use ```bc learnbc.bc```."
