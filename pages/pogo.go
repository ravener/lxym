
package pages

const Pogo = "Pogoscript is a little language that emphasises readability, DSLs and provides excellent asynchronous primitives for writing connected JavaScript applications for the browser or server.\n\n``` javascript\n// defining a variable\nwater temperature = 24\n\n// re-assigning a variable after its definition\nwater temperature := 26\n\n// functions allow their parameters to be placed anywhere\ntemperature at (a) altitude = 32 - a / 100\n\n// longer functions are just indented\ntemperature at (a) altitude :=\n    if (a < 0)\n        water temperature\n    else\n        32 - a / 100\n\n// calling a function\ncurrent temperature = temperature at 3200 altitude\n\n// this function constructs a new object with methods\nposition (x, y) = {\n    x = x\n    y = y\n\n    distance from position (p) =\n        dx = self.x - p.x\n        dy = self.y - p.y\n        Math.sqrt (dx * dx + dy * dy)\n}\n\n// `self` is similar to `this` in JavaScript with the\n// exception that `self` isn't redefined in each new\n// function definition\n// `self` just does what you expect\n\n// calling methods\nposition (7, 2).distance from position (position (5, 1))\n\n// as in JavaScript, objects are hashes too\nposition.'x' == position.x == position.('x')\n\n// arrays\npositions = [\n    position (1, 1)\n    position (1, 2)\n    position (1, 3)\n]\n\n// indexing an array\npositions.0.y\n\nn = 2\npositions.(n).y\n\n// strings\npoem = 'Tail turned to red sunset on a juniper crown a lone magpie cawks.\n        Mad at Oryoki in the shrine-room -- Thistles blossomed late afternoon.\n        Put on my shirt and took it off in the sun walking the path to lunch.\n        A dandelion seed floats above the marsh grass with the mosquitos.\n        At 4 A.M. the two middleaged men sleeping together holding hands.\n        In the half-light of dawn a few birds warble under the Pleiades.\n        Sky reddens behind fir trees, larks twitter, sparrows cheep cheep cheep\n        cheep cheep.'\n\n// that's Allen Ginsburg\n\n// interpolation\noutlook = 'amazing!'\nconsole.log \"the weather tomorrow is going to be #(outlook)\"\n\n// regular expressions\nr/(\\d+)m/i\nr/(\\d+) degrees/mg\n\n// operators\ntrue @and true\nfalse @or true\n@not false\n2 < 4\n2 >= 2\n2 > 1\n\n// plus all the javascript ones\n\n// to define your own\n(p1) plus (p2) =\n    position (p1.x + p2.x, p1.y + p2.y)\n\n// `plus` can be called as an operator\nposition (1, 1) @plus position (0, 2)\n// or as a function\n(position (1, 1)) plus (position (0, 2))\n\n// explicit return\n(x) times (y) = return (x * y)\n\n// new\nnow = @new Date ()\n\n// functions can take named optional arguments\nspark (position, color: 'black', velocity: {x = 0, y = 0}) = {\n    color = color\n    position = position\n    velocity = velocity\n}\n\nred = spark (position 1 1, color: 'red')\nfast black = spark (position 1 1, velocity: {x = 10, y = 0})\n\n// functions can unsplat arguments too\nlog (messages, ...) =\n    console.log (messages, ...)\n\n// blocks are functions passed to other functions.\n// This block takes two parameters, `spark` and `c`,\n// the body of the block is the indented code after the\n// function call\n\nrender each @(spark) into canvas context @(c)\n    ctx.begin path ()\n    ctx.stroke style = spark.color\n    ctx.arc (\n        spark.position.x + canvas.width / 2\n        spark.position.y\n        3\n        0\n        Math.PI * 2\n    )\n    ctx.stroke ()\n\n// asynchronous calls\n\n// JavaScript both in the browser and on the server (with Node.js)\n// makes heavy use of asynchronous IO with callbacks. Async IO is\n// amazing for performance and making concurrency simple but it\n// quickly gets complicated.\n// Pogoscript has a few things to make async IO much much easier\n\n// Node.js includes the `fs` module for accessing the file system.\n// Let's list the contents of a directory\n\nfs = require 'fs'\ndirectory listing = fs.readdir! '.'\n\n// `fs.readdir()` is an asynchronous function, so we can call it\n// using the `!` operator. The `!` operator allows you to call\n// async functions with the same syntax and largely the same\n// semantics as normal synchronous functions. Pogoscript rewrites\n// it so that all subsequent code is placed in the callback function\n// to `fs.readdir()`.\n\n// to catch asynchronous errors while calling asynchronous functions\n\ntry\n    another directory listing = fs.readdir! 'a-missing-dir'\ncatch (ex)\n    console.log (ex)\n\n// in fact, if you don't use `try catch`, it will raise the error up the\n// stack to the outer-most `try catch` or to the event loop, as you'd expect\n// with non-async exceptions\n\n// all the other control structures work with asynchronous calls too\n// here's `if else`\nconfig =\n    if (fs.stat! 'config.json'.is file ())\n        JSON.parse (fs.read file! 'config.json' 'utf-8')\n    else\n        {\n            color: 'red'\n        }\n\n// to run two asynchronous calls concurrently, use the `?` operator.\n// The `?` operator returns a *future* which can be executed to\n// wait for and obtain the result, again using the `!` operator\n\n// we don't wait for either of these calls to finish\na = fs.stat? 'a.txt'\nb = fs.stat? 'b.txt'\n\n// now we wait for the calls to finish and print the results\nconsole.log \"size of a.txt is #(a!.size)\"\nconsole.log \"size of b.txt is #(b!.size)\"\n\n// futures in Pogoscript are analogous to Promises\n```\n\nThat's it.\n\nDownload [Node.js](http://nodejs.org/) and `npm install pogo`.\n\nThere is plenty of documentation on [http://pogoscript.org/](http://pogoscript.org/), including a [cheat sheet](http://pogoscript.org/cheatsheet.html), a [guide](http://pogoscript.org/guide/), and how [Pogoscript translates to Javascript](http://featurist.github.io/pogo-examples/). Get in touch on the [google group](http://groups.google.com/group/pogoscript) if you have questions!"
