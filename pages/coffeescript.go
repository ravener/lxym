
package pages

const Coffeescript = "CoffeeScript is a little language that compiles one-to-one into the equivalent\nJavaScript, and there is no interpretation at runtime. As one of the successors\nto JavaScript, CoffeeScript tries its best to output readable, pretty-printed\nand smooth-running JavaScript code, which works well in every JavaScript runtime.\nIt also attempts to try and make JavaScript more in line with the trends of many\nmodern languages.\n\nSee also [the CoffeeScript website](http://coffeescript.org/), which has a complete tutorial on CoffeeScript.\n\n```coffeescript\n# Comments are similar to Ruby and Python, using the hash symbol `#`\n\n###\nBlock comments are like these, and they translate directly to '/ *'s and '* /'s\nfor the resulting JavaScript code.\n\nYou should understand most of JavaScript semantics\nbefore continuing.\n###\n\n# Assignment:\nnumber   = 42 #=> var number = 42;\nopposite = true #=> var opposite = true;\n\n# Conditions:\nnumber = -42 if opposite #=> if(opposite) { number = -42; }\n\n# Functions:\nsquare = (x) -> x * x #=> var square = function(x) { return x * x; }\n\nfill = (container, liquid = \"coffee\") ->\n  \"Filling the #{container} with #{liquid}...\"\n#=>var fill;\n#\n#fill = function(container, liquid) {\n#  if (liquid == null) {\n#    liquid = \"coffee\";\n#  }\n#  return \"Filling the \" + container + \" with \" + liquid + \"...\";\n#};\n\n# Ranges:\nlist = [1..5] #=> var list = [1, 2, 3, 4, 5];\n\n# Objects:\nmath =\n  root:   Math.sqrt\n  square: square\n  cube:   (x) -> x * square x\n#=> var math = {\n#    \"root\": Math.sqrt,\n#    \"square\": square,\n#    \"cube\": function(x) { return x * square(x); }\n#   };\n\n# Splats:\nrace = (winner, runners...) ->\n  print winner, runners\n#=>race = function() {\n#    var runners, winner;\n#    winner = arguments[0], runners = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n#    return print(winner, runners);\n#  };\n\n# Existence:\nalert \"I knew it!\" if elvis?\n#=> if(typeof elvis !== \"undefined\" && elvis !== null) { alert(\"I knew it!\"); }\n\n# Array comprehensions:\ncubes = (math.cube num for num in list)\n#=>cubes = (function() {\n#\t  var _i, _len, _results;\n#\t  _results = [];\n# \tfor (_i = 0, _len = list.length; _i < _len; _i++) {\n#\t\t  num = list[_i];\n#\t\t  _results.push(math.cube(num));\n#\t  }\n#\t  return _results;\n# })();\n\nfoods = ['broccoli', 'spinach', 'chocolate']\neat food for food in foods when food isnt 'chocolate'\n#=>foods = ['broccoli', 'spinach', 'chocolate'];\n#\n#for (_k = 0, _len2 = foods.length; _k < _len2; _k++) {\n#  food = foods[_k];\n#  if (food !== 'chocolate') {\n#    eat(food);\n#  }\n#}\n```\n\n## Additional resources\n\n- [Smooth CoffeeScript](http://autotelicum.github.io/Smooth-CoffeeScript/)\n- [CoffeeScript Ristretto](https://leanpub.com/coffeescript-ristretto/read)"
