
package pages

const Inform7 = "Inform 7 is a natural language based language created by Graham Nelson and Emily Short for writing text adventures, but also potentially usable for other text based applications, especially data backed ones.\n\n```\n\"LearnInform\" by Hyphz\n\n[This is a comment.]\n\n[Inform 7 is a language designed for building text adventures.\nIt can be used for other purposes too, although the default \nlibrary builds a text adventure. Inform 7 is object oriented.]\n\n[This creates a class by subclassing. \"Value\" is the universal subclass,\nbut \"object\" is the most basic that behaves like an OO object.]\nA datablock is a kind of object. \n\n[Classes can have properties.]\nA datablock can be broken. [This creates a boolean property.]\nA datablock is usually not broken. [This sets its default value.]\nA datablock can be big or small. [This creates an enumerated property.]\nA datablock is usually small. [This sets its default value.]\nA datablock has a number called the sequence number. [This creates a typed property.]\nA datablock has some text called the name. [\"Some text\" means a string.]\nA datablock has a datablock called the chain. [Declared classes become types.]\n\n[This creates a global named instance.]\nBlock1 is a datablock.\nThe sequence number of Block1 is 1.\nThe name of Block1 is \"Block One.\"\n\n[Functions and procedures are defined as \"phrases\".]\nTo do the thing everyone does with their first program:\n\tsay \"Hello World.\". [Full stop indicates the end, indent indicates the scope.]\n\t\nTo dump (the block - a datablock): [That's how we create a parameter.]\n\tsay the sequence number of the block;\n\tsay the name of the block;\n\tif the block is broken, say \"(Broken)\".\n\t\t\nTo toggle (the block - a datablock):\n\tif the block is broken: [Conditional.]\n\t\tnow the block is not broken; [Updating a property.]\n\telse:\n\t\tnow the block is broken.\n\t\t\n[Multiple parameters.]\nTo fix (the broken block - a datablock) using (the repair block - a datablock):\n\tif the broken block is not broken, stop; [Comma for a non indented single command.]\n\tif the repair block is broken, stop;\n\tnow the sequence number of the broken block is the sequence number of the repair block;\n\tnow the broken block is not broken.\n\n[Because of its text adventure origins, Inform 7 doesn't generally allow objects\nto be created dynamically, although there's a language extension that enables it.]\t\nBlock2 is a datablock. \nBlock2 is broken.\nThe sequence number of Block2 is 2.\nThe name of Block2 is \"Block two.\"\n\nTo demonstrate calling a phrase with two parameters:\n\tLet the second block be block2; [Local pointer variable.]\n\tfix the second block using Block1;\n\tsay the sequence number of the second block. [1.]\n\t\n[Lists.]\t\nTo show how to use list types:\n\tlet the list be a list of datablocks;\n\tadd Block1 to the list;\n\tadd Block2 to the list;\n\tsay the list; [\"Block1 and Block2\"]\n\t[Membership.]\n\tif Block1 is listed in the list:\n\t\tsay \"Block1 is there.\";\n\t[Loop.]\n\trepeat with the block running through the list:\n\t\tdump the block;  [1 Block One. 1 Block Two.]\n\t\t[Remember block two's sequence number was changed above.]\n\tlet X be entry 2 of the list; [Counting starts at 1.]\n\tdump X; [\"1 Block two.\"]\n\tremove X from the list;\n\tsay the list. [Block1]\n\t\t\n[Here's how we define a function and do arithmetic.]\n\nTo decide which number is the sum of all numbers up to (X - a number) (this is summing up):\n\tlet the total so far be a number;\n\trepeat with the current number running from 1 to X:\n\t\tnow the total so far is the total so far + the current number;\n\tdecide on the total so far. [This is the return statement.]\n\t\n[ We have higher order functions too. ]\n\nTo demonstrate a higher order function:\n\tsay summing up applied to {1, 2, 3, 4}.\n\nTo decide which number is the result of applying (phrase - phrase A -> A) twice to (B - a value of kind A):\n\tlet b1 be phrase applied to B;\n\tlet b2 be phrase applied to b1;\n\tdecide on b2.\n\t\nTo demonstrate defining a higher order function:\n\tlet X be 5;\n\tsay the result of applying summing up twice to X.\n\n[ Rulebooks allow a number of functions which apply to the same type under different conditions to be stacked. ]\n\nDatablock validation rules is a datablock based rulebook.\n\nA datablock validation rule for a broken datablock: rule fails.\nA datablock validation rule for a datablock (called the block): \n\tdump the block;\n\trule succeeds.\n\t\t\nTo demonstrate invoking a rulebook:\n\tfollow datablock validation rules for Block1;\n\tfollow datablock validation rules for Block2.\n\t\n[ Objects can also have relations, which resemble those in a relational database. ]\nA dog is a kind of thing.\nRover is a dog.\nThe kennel is a container. [This is a built in base class.]\nRover is in the kennel. [This creates an inbuilt relation called \"containment\".]\n\n[We can create relations by declaring their type.]\n\nGuide dog ownership relates one dog to one person. [One-to-one.]\nProperty ownership relates various things to one person. [Many-to-one.]\nFriendship relates various people to various people.  [Many-to-many.]\n\n[To actually use them we must assign verbs or prepositions to them.]\n\nThe verb to own means the property ownership relation.\nThe verb to be the guide dog of means the guide dog ownership relation.\nThe verb to be guided by means the reversed guide dog ownership relation. \nThe verb to be friends with means the friendship relation.\n\nEdward is a person. A person can be blind. Edward is blind.\nEdward is guided by Rover.\nBenny is a person. Edward is friends with Benny.\n\nTo demonstrate looking something up with a relation:\n\trepeat with the dog running through things that are the guide dog of Edward:\n\t\tsay the dog;\n\trepeat with the friend running through things that are friends with Edward:\n\t\tsay the friend.\n\n[We can also define relations that exist procedurally.]\n\nHelpfulness relates a person (called the helper) to a person (called the helpee) when the helpee is blind and the helper is not blind.\nThe verb to be helpful to means the helpfulness relation.\nTo demonstrate using a procedural relation:\n\trepeat with the helper running through people that are helpful to Edward:\n\t\tsay the helper.\n\t\n\n[ Interface to the text adventure harness to allow the above code to be run. ]\nTutorial room is a room. \n\"A rather strange room full of buttons. Push them to run the exercises, or turn on the robot to run them all.\"\nA button is a kind of thing. A button is fixed in place. \n\nThe red button is a button in tutorial room. \nInstead of pushing the red button, do the thing everyone does with their first program.\nThe green button is a button in tutorial room. \nInstead of pushing the green button, demonstrate calling a phrase with two parameters.\nThe blue button is a button in tutorial room. \nInstead of pushing the blue button, show how to use list types.\nThe cyan button is a button in tutorial room.\nInstead of pushing the cyan button, say the sum of all numbers up to 5.\nThe purple button is a button in tutorial room.\nInstead of pushing the purple button, demonstrate a higher order function.\nThe black button is a button in tutorial room.\nInstead of pushing the black button, demonstrate defining a higher order function.\nThe white button is a button in tutorial room.\nInstead of pushing the white button, demonstrate invoking a rulebook.\nThe puce button is a button in tutorial room.\nInstead of pushing the puce button, demonstrate looking something up with a relation.\nThe orange button is a button in tutorial room.\nInstead of pushing the orange button, demonstrate using a procedural relation.\n\nThe robot is an object in tutorial room.\nInstead of switching on the robot:\n\tsay \"The robot begins to frantically flail its arms about.\";\n\trepeat with button running through buttons in the tutorial room:\n\t\tsay \"The robot randomly hits [the button].\";\n\t\ttry pushing button.\n```\n\n##Ready For More?\n\n* [Inform 7](http://www.inform7.com/)"
