
package pages

const Ldpl = "**LDPL** is a powerful, C++ transpiled, open-source programming language designed\nfrom the ground up to be excessively expressive, readable, fast and easy to learn.\nIt mimics plain English, in the likeness of older programming languages like COBOL,\nwith the desire that it can be understood by anybody. It's very portable and runs on a\nplethora of different architectures and operating systems and it even supports UTF-8\nout of the box.\n\n[Read more here.](https://github.com/lartu/ldpl)\n\n```coffeescript\n# This is a single line comment in LDPL.\n# LDPL doesn't have multi-line comments.\n\n# LDPL is a case-insensitive language: dIsPlaY and DISPLAY are the same\n# statement, and foo and FOO name the same variable.\n\n# An LDPL source file is divided in two sections, the DATA section and\n# the PROCEDURE section.\n\nDATA:\n# Within the DATA section, variables are declared.\n\nmyNumber is number          # Defines a real number.\nmyString is text            # Defines a string.\nmyList is number list       # Defines a list of numbers.\nmyMap  is number map        # Defines a map of numbers.\n\n# LDPL understands four data types: two scalar types (NUMBER, TEXT)\n# and two container types (LISTs and MAPs).\n# LISTs can be TEXT LISTs or NUMBER LISTs, while MAPs can be\n# TEXT MAPs and NUMBER MAPs. You can also chain many containers\n# to create larger data types:\ntextListList is text list list\nmyMulticontainer is number list list map \n# Defines a map of lists of lists of numbers.\n\nPROCEDURE:\n# Within the PROCEDURE section, your code is written.\n\nstore -19.2 in myNumber         # Use the STORE statement to assign values\nstore \"Hi there\" in myString    # to variables.\npush 890 to myList # Use PUSH - TO to append values to lists.\npush 100 to myList\npush 500 to myList\nstore 45 in myMap:\"someIndex\" # Use the : operator to index containers.\n\npush list to textListList # Push an empty list into a list of lists.\npush \"LDPL is nice!\" to textListList:0 #Push text to the pushed list.\n\ndisplay \"Hello World!\" # Use the DISPLAY statement to print values.\n# The display statement can receive multiple values separated by spaces.\ndisplay crlf \"How are you today?\" myNumber myString crlf\n# CRLF is the standard line break value in LDPL.\ndisplay textListList:0:0 \" Isn't it?\" crlf\n\n# IF statements in LDPL are extremely verbose:\nif myNumber is equal to -19.2 and myList:0 is less than 900 then\n    display \"Yes!\" crlf\nelse if myMap:\"someIndex\" is not equal to 45 then\n    display \"This is an else if!\" crlf\nelse\n    display \"Else!\" crlf\nend if\n# Valid LDPL comparisson operators are\n# - IS EQUAL TO\n# - IS NOT EQUAL TO\n# - IS LESS THAN\n# - IS GREATER THAN\n# - IS LESS THAN OR EQUAL TO\n# - IS GREATER THAN OR EQUAL TO\nif \"Hi there!\" is not equal to \"Bye bye!\" then\n    display \"Yep, those weren't equal.\" crlf\nend if\n# LDPL normally doesn't understand inline expressions, so you\n# cannot do stuff like:\n# if myNumber - 9 * 2 is equal to 10 then\n# LDPL will set your computer on fire and burst your screen if you do so.\n\n# WHILE loops follow the same rules\nstore 0 in myNumber\nwhile myNumber is less than 10 do\n    display \"Loop number \" myNumber \"...\" crlf\n    in myNumber solve myNumber + 1 # You can do math like this.\nrepeat\n# You can use 'break' and 'continue' inside loops just like any other language.\n\n# LDPL also has FOR loops and FOR EACH loops\nfor myNumber from 0 to 100 step 2 do\n    display myNumber crlf\nrepeat\n\nfor each myNumber in myList do\n    display myNumber\nrepeat\n\ndisplay \"Enter your name: \"\naccept myString # Use ACCEPT to let the user input values.\ndisplay \"Hi there, \" myString crlf\ndisplay \"How old are you?: \"\naccept myNumber\nif myNumber is greater than 200 then\n    display \"Woah, you are so old!\" crlf\nend if\n\nwait 1000 milliseconds # Pause the program for a whole second.\n\n# Let's do some math\nstore 1.2 in myNumber\nin myNumber solve myNumber * (10 / 7.2) # Operators are separated by spaces.\nfloor myNumber\ndisplay myNumber crlf\nget random in myNumber # get a random number between 0 and 1 \n                       # and store it in myNumber\n\n# Functions in LDPL are called sub-procedures. Sub-procedures, like source\n# files, are divided in sections. The sections found in sub-procedures are\n# the PARAMETERS section, the LOCAL DATA section and the PROCEDURE section.\n# All sections except the PROCEDURE section can be skipped if they aren't\n# used. If no PARAMTERS nor LOCAL DATA sections are used, the PROCEDURE\n# keyword may be omited.\nsub myFunction\n    parameters:\n        a is number # LDPL is pass by reference\n        b is number\n        result is number # Thus you can return values through a parameter.\n    local data:\n        c is number\n    procedure:\n        get random in c\n        in result solve a + b * c\nend sub\n\nsub sayHello\n    display \"Hi there!\" crlf\n    return\n    display \"This won't be displayed :(\"\nend sub\n\ncall myFunction with 1 2 myNumber\ndisplay myNumber crlf\ncall sayHello\ncall sayBye # sub-procedures may be called before they are declared\n\nsub sayBye\n    display \"Bye!\"\nend sub\n\n# One of the greatest features of LDPL is the ability to create your\n# own statements.\n\ncreate statement \"say hi\" executing sayHello\nsay hi\n\ncreate statement \"random add $ and $ in $\" executing myFunction\nrandom add 1 and 2 in myNumber\ndisplay myNumber crlf\n\nexit\n```\n\n## Further Reading\n\n * [LDPL Docs](https://docs.ldpl-lang.org)"
