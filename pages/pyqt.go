
package pages

const Pyqt = "**Qt** is a widely-known framework for developing cross-platform software that can be run on various software and hardware platforms with little or no change in the code, while having the power and speed of native applications. Though **Qt** was originally written in *C++*.\n\n\nThis is an adaption on the C++ intro to QT by [Aleksey Kholovchuk](https://github.com/vortexxx192\n), some of the code examples should result in the same functionality\nthis version just having been done using pyqt! \n\n```python\nimport sys\nfrom PyQt4 import QtGui\n\t\ndef window():\n\t# Create an application object \n    app = QtGui.QApplication(sys.argv)\n\t# Create a widget where our label will be placed in\n    w = QtGui.QWidget()\n\t# Add a label to the widget \n    b = QtGui.QLabel(w)\n\t# Set some text for the label \n    b.setText(\"Hello World!\")\n\t# Give some size and placement information \n    w.setGeometry(100, 100, 200, 50)\n    b.move(50, 20)\n\t# Give our window a nice title \n    w.setWindowTitle(\"PyQt\")\n\t# Have everything display\n    w.show()\n\t# Execute what we have asked for, once all setup\n    sys.exit(app.exec_())\n\nif __name__ == '__main__':\n    window()\n\n```\n\nIn order to get some of the more advanced features in **pyqt** we need to start looking at building additional elements. \nHere we show how to introduce a dialog popup box, useful for asking the user to confirm a decision or to provide information.\n\n```Python \nimport sys\nfrom PyQt4.QtGui import *\nfrom PyQt4.QtCore import *\n\n\ndef window():\n    app = QApplication(sys.argv)\n    w = QWidget()\n    # Create a button and attach to widget w\n    b = QPushButton(w)\n    b.setText(\"Press me\")\n    b.move(50, 50)\n    # Tell b to call this function when clicked\n    # notice the lack of \"()\" on the function call\n    b.clicked.connect(showdialog)\n    w.setWindowTitle(\"PyQt Dialog\")\n    w.show()\n    sys.exit(app.exec_())\n\t\n# This function should create a dialog window with a button\n# that waits to be clicked and then exits the program\ndef showdialog():\n    d = QDialog()\n    b1 = QPushButton(\"ok\", d)\n    b1.move(50, 50)\n    d.setWindowTitle(\"Dialog\")\n    # This modality tells the popup to block the parent whilst it's active\n    d.setWindowModality(Qt.ApplicationModal)\n    # On click I'd like the entire process to end\n    b1.clicked.connect(sys.exit)\n    d.exec_()\n\nif __name__ == '__main__':\n    window()\n```"
