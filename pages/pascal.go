
package pages

const Pascal = ">Pascal is an imperative and procedural programming language, which Niklaus Wirth designed in 1968–69 and published in 1970, as a small, efficient language intended to encourage good programming practices using structured programming and data structuring. It is named in honor of the French mathematician, philosopher and physicist Blaise Pascal. \nsource : [wikipedia](https://en.wikipedia.org/wiki/Pascal_(programming_language))\n\n\n\nto compile and run a pascal program you could use a free pascal compiler. [Download Here](https://www.freepascal.org/)\n\n```pascal\n//Anatomy of a Pascal Program\n//this is a comment\n{\n    this is a \n    multiline comment\n}\n\n//name of the program\nprogram learn_pascal; //<-- dont forget a semicolon\n\nconst\n    {\n        this is where you should declare constant values\n    }\ntype\n    {\n        this is where you should delcare a custom\n        data-types\n    }\nvar\n    {\n        this is where you should declare a variable\n    }\n\n//main program area\nbegin\n    {\n        area to declare your instruction\n    }\nend. // End of a main program area should required a \".\" symbol\n```\n\n```pascal\n//declaring variable\n//you can do this\nvar a:integer;\nvar b:integer;\n//or this\nvar \n    a : integer;\n    b : integer;\n//or this\nvar a,b : integer;\n```\n\n```pascal\nprogram Learn_More;\n//Lets learn about data types and their operations\n\nconst\n    PI = 3.141592654;\n    GNU = 'GNU''s Not Unix';\n        // constants are conventionally named using CAPS\n        // their values are fixed and cannot be changed during runtime\n        // holds any standard data type (integer, real, boolean, char, string)\n\ntype\n    ch_array : array [0..255] of char;\n        // arrays are new 'types' specifying the length and data type\n        // this defines a new data type that contains 255 characters\n        // (this is functionally equivalent to a string[256] variable)\n    md_array : array of array of integer;\n        // nested arrays are equivalent to multidimensional arrays\n        // can define zero (0) length arrays that are dynamically sized\n        // this is a 2-dimensional array of integers\n\n//Declaring variables\nvar\n    int, c, d  : integer;\n           // three variables that contain integer numbers\n           // integers are 16-bits and limited to the range [-32,768..32,767]\n    r    : real;\n           // a variable that contains a real number data types\n           // reals can range between [3.4E-38..3.4E38]\n    bool : boolean;\n           // a variable that contains a Boolean(True/False) value\n    ch   : char;\n           // a variable that contains a character value\n           // char variables are stored as 8-bit data types so no UTF\n    str  : string;\n           // a non-standard variable that contains a string value\n           // strings are an extension included in most Pascal compilers\n           // they are stored as an array of char with default length of 255.\n    s    : string[50];\n           // a string with maximum length of 50 chars.\n           // you can specify the length of the string to minimize memory usage\n    my_str: ch_array;\n           // you can declare variables of custom types\n    my_2d : md_array;\n           // dynamically sized arrays need to be sized before they can be used.\n\n    // additional integer data types\n    b    : byte;     // range [0..255]\n    shi  : shortint; // range [-128..127]\n    smi  : smallint; // range [-32,768..32,767] (standard Integer)\n    w    : word;     // range [0..65,535]\n    li   : longint;  // range [-2,147,483,648..2,147,483,647]\n    lw   : longword; // range [0..4,294,967,295]\n    c    : cardinal; // longword\n    i64  : int64;    // range [-9223372036854775808..9223372036854775807]\n    qw   : qword;    // range [0..18,446,744,073,709,551,615]\n\n    // additional real types\n    rr   : real;     // range depends on platform (i.e., 8-bit, 16-bit, etc.)\n    rs   : single;   // range [1.5E-45..3.4E38]\n    rd   : double;   // range [5.0E-324 .. 1.7E308]\n    re   : extended; // range [1.9E-4932..1.1E4932]\n    rc   : comp;     // range [-2E64+1 .. 2E63-1]\n\nBegin\n    int := 1;// how to assign a value to a variable\n    r   := 3.14;\n    ch  := 'a';\n    str := 'apple';\n    bool := true;\n    //pascal is not a case-sensitive language\n    //arithmethic operation\n    int := 1 + 1; // int = 2 overwriting the previous assignment\n    int := int + 1; // int = 2 + 1 = 3;\n    int := 4 div 2; //int = 2 division operation where result will be floored\n    int := 3 div 2; //int = 1\n    int := 1 div 2; //int = 0\n\n    bool := true or false; // bool = true\n    bool := false and true; // bool = false\n    bool := true xor true; // bool = false\n\n    r := 3 / 2; // a division operator for real\n    r := int; // can assign an integer to a real variable but not the reverse\n\n    c := str[1]; // assign the first letter of str to c\n    str := 'hello' + 'world'; //combining strings\n\n    my_str[0] := 'a'; // array assignment needs an index\n\n    setlength(my_2d,10,10); // initialize dynamically sized arrays: 10×10 array\n    for c := 0 to 9 do // arrays begin at 0 and end at length-1\n        for d := 0 to 9 do // for loop counters need to be declared variables\n        my_2d[c,d] := c * d;\n          // address multidimensional arrays with a single set of brackets\n\nEnd.\n```\n\n```pascal\nprogram Functional_Programming;\n\nVar\n    i, dummy : integer;\n\nfunction factorial_recursion(const a: integer) : integer;\n{ recursively calculates the factorial of integer parameter a }\n\n// Declare local variables within the function\n// e.g.:\n// Var\n//    local_a : integer;\n\nBegin\n    If a >= 1 Then\n    // return values from functions by assigning a value to the function name\n        factorial_recursion := a * factorial_recursion(a-1)\n    Else\n        factorial_recursion := 1;\nEnd; // terminate a function using a semicolon after the End statement.\n\nprocedure get_integer(var i : integer; dummy : integer);\n{ get user input and store it in the integer parameter i.\n  parameters prefaced with 'var' are variable, meaning their value can change\n  outside of the parameter. Value parameters (without 'var') like 'dummy' are\n  static and changes made within the scope of the function/procedure do not\n  affect the variable passed as a parameter }\n\nBegin\n    write('Enter an integer: ');\n    readln(i);\n    dummy := 4; // dummy will not change value outside of the procedure\nEnd;\n\nBegin // main program block\n    dummy := 3;\n    get_integer(i, dummy);\n    writeln(i, '! = ', factorial_recursion(i));\n    // outputs i!\n    writeln('dummy = ', dummy); // always outputs '3' since dummy is unchanged.\nEnd.\n\n```"
