
package pages

const Messagepack = "MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. The benefits over other formats is that it's faster and smaller. \n\nIn MessagePack, small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves. This makes MessagePack useful for efficient transmission over wire.\n\n```\n\n# 0. Understanding The Structure ====\n\nJSON, 40 Bytes UTF-8\n\t\n----------------------------------------------\n| {\"name\":\"John Doe\",\"age\":12}\t\t         |\n----------------------------------------------\n|  {\"         | 7B 22                        |\n|    name     | 6E 61 6D 65                  |\n|  \":\"        | 22 3A 22                     |\n|    John Doe | 4A 6F 68 6E 20 44 6F 65      |\n|  \",\"        | 22 2C 22                     |\n|    age      | 61 67 65                     |\n|  \":         | 22 3A 20                     |\n|    12       | 31 32                        |\n|  }          | 7D                           |\n----------------------------------------------\n\n\nMessagePack, 27 Bytes UTF-8\n\t\n----------------------------------------------\n| ‚¤name¨John Doe£age.12                     |\n----------------------------------------------\n|  ‚¤         | 82 84                        |\n|    name     | 6E 61 6D 65                  |\n|  ¨          | A8                           |\n|    John Doe | 4A 6F 68 6E 20 44 6F 65      |\n|  £          | A3                           |\n|    age      | 61 67 65                     |\n|  .          | 0C                           |\n|    12       | 31 32                        |\n----------------------------------------------\n\n# 1. JAVA ====\n\n\"\"\" Installing with Maven\n\"\"\"\n\n<dependencies>\n  ...\n  <dependency>\n    <groupId>org.msgpack</groupId>\n    <artifactId>msgpack</artifactId>\n    <version>${msgpack.version}</version>\n  </dependency>\n  ...\n</dependencies>\n\n\n\"\"\" Simple Serialization/Deserialization\n\"\"\"\n\n// Create serialize objects.\nList<String> src = new ArrayList<String>();\nsrc.add(\"msgpack\");\nsrc.add(\"kumofs\");\n\nMessagePack msgpack = new MessagePack();\n// Serialize\nbyte[] raw = msgpack.write(src);\n\n// Deserialize directly using a template\nList<String> dst1 = msgpack.read(raw, Templates.tList(Templates.TString));\nSystem.out.println(dst1.get(0));\nSystem.out.println(dst1.get(1));\n\n// Or, Deserialze to Value then convert type.\nValue dynamic = msgpack.read(raw);\nList<String> dst2 = new Converter(dynamic)\n    .read(Templates.tList(Templates.TString));\nSystem.out.println(dst2.get(0));\nSystem.out.println(dst2.get(1));\n\n\n# 2. RUBY ====\n\n\"\"\" Installing the Gem\n\"\"\"\n\ngem install msgpack\n\n\"\"\" Streaming API\n\"\"\"\n\n# serialize a 2-element array [e1, e2]\npk = MessagePack::Packer.new(io)\npk.write_array_header(2).write(e1).write(e2).flush\n\n# deserialize objects from an IO\nu = MessagePack::Unpacker.new(io)\nu.each { |obj| ... }\n\n# event-driven deserialization\ndef on_read(data)\n  @u ||= MessagePack::Unpacker.new\n  @u.feed_each(data) { |obj| ... }\nend\n\n# 3. NODE.JS ====\n\n\"\"\" Installing with NPM\n\"\"\"\n\nnpm install msgpack5 --save\n\n\"\"\" Using in Node\n\"\"\"\n\nvar msgpack = require('msgpack5')() // namespace our extensions\n  , a       = new MyType(2, 'a')\n  , encode  = msgpack.encode\n  , decode  = msgpack.decode\n\nmsgpack.register(0x42, MyType, mytipeEncode, mytipeDecode)\n\nconsole.log(encode({ 'hello': 'world' }).toString('hex'))\n// 81a568656c6c6fa5776f726c64\nconsole.log(decode(encode({ 'hello': 'world' })))\n// { hello: 'world' }\nconsole.log(encode(a).toString('hex'))\n// d5426161\nconsole.log(decode(encode(a)) instanceof MyType)\n// true\nconsole.log(decode(encode(a)))\n// { value: 'a', size: 2 }\n\nfunction MyType(size, value) {\n  this.value = value\n  this.size  = size\n}\n\nfunction mytipeEncode(obj) {\n  var buf = new Buffer(obj.size)\n  buf.fill(obj.value)\n  return buf\n}\n\nfunction mytipeDecode(data) {\n  var result = new MyType(data.length, data.toString('utf8', 0, 1))\n    , i\n\n  for (i = 0; i < data.length; i++) {\n    if (data.readUInt8(0) != data.readUInt8(i)) {\n      throw new Error('should all be the same')\n    }\n  }\n\n  return result\n}\n\n```\n\n\n# References\n\n- [MessagePack](http://msgpack.org/index.html)\n- [MsgPack vs. JSON: Cut your client-server exchange traffic by 50% with one line of code](http://indiegamr.com/cut-your-data-exchange-traffic-by-up-to-50-with-one-line-of-code-msgpack-vs-json/)"
