
package pages

const Pythonlegacy = "Python was created by Guido Van Rossum in the early 90s. It is now one of the\nmost popular languages in existence. I fell in love with Python for its\nsyntactic clarity. It's basically executable pseudocode.\n\nFeedback would be highly appreciated! You can reach me at [@louiedinh](http://twitter.com/louiedinh)\nor louiedinh [at] [google's email service]\n\nNote: This article applies to Python 2.7 specifically, but should be applicable\nto Python 2.x. Python 2.7 is reaching end of life and will stop being\nmaintained in 2020, it is though recommended to start learning Python with\nPython 3. For Python 3.x, take a look at the [Python 3 tutorial](http://learnxinyminutes.com/docs/python/).\n\nIt is also possible to write Python code which is compatible with Python 2.7\nand 3.x at the same time, using Python [`__future__` imports](https://docs.python.org/2/library/__future__.html). `__future__` imports\nallow you to write Python 3 code that will run on Python 2, so check out the\nPython 3 tutorial.\n\n```python\n\n# Single line comments start with a number symbol.\n\n\"\"\" Multiline strings can be written\n    using three \"s, and are often used\n    as comments\n\"\"\"\n\n####################################################\n# 1. Primitive Datatypes and Operators\n####################################################\n\n# You have numbers\n3  # => 3\n\n# Math is what you would expect\n1 + 1  # => 2\n8 - 1  # => 7\n10 * 2  # => 20\n35 / 5  # => 7\n\n# Division is a bit tricky. It is integer division and floors the results\n# automatically.\n5 / 2  # => 2\n\n# To fix division we need to learn about floats.\n2.0  # This is a float\n11.0 / 4.0  # => 2.75 ahhh...much better\n\n# Result of integer division truncated down both for positive and negative.\n5 // 3  # => 1\n5.0 // 3.0  # => 1.0 # works on floats too\n-5 // 3  # => -2\n-5.0 // 3.0  # => -2.0\n\n# Note that we can also import division module(Section 6 Modules)\n# to carry out normal division with just one '/'.\nfrom __future__ import division\n\n11 / 4  # => 2.75  ...normal division\n11 // 4  # => 2 ...floored division\n\n# Modulo operation\n7 % 3  # => 1\n\n# Exponentiation (x to the yth power)\n2 ** 4  # => 16\n\n# Enforce precedence with parentheses\n(1 + 3) * 2  # => 8\n\n# Boolean Operators\n# Note \"and\" and \"or\" are case-sensitive\nTrue and False  # => False\nFalse or True  # => True\n\n# Note using Bool operators with ints\n0 and 2  # => 0\n-5 or 0  # => -5\n0 == False  # => True\n2 == True  # => False\n1 == True  # => True\n\n# negate with not\nnot True  # => False\nnot False  # => True\n\n# Equality is ==\n1 == 1  # => True\n2 == 1  # => False\n\n# Inequality is !=\n1 != 1  # => False\n2 != 1  # => True\n\n# More comparisons\n1 < 10  # => True\n1 > 10  # => False\n2 <= 2  # => True\n2 >= 2  # => True\n\n# Comparisons can be chained!\n1 < 2 < 3  # => True\n2 < 3 < 2  # => False\n\n# Strings are created with \" or '\n\"This is a string.\"\n'This is also a string.'\n\n# Strings can be added too!\n\"Hello \" + \"world!\"  # => \"Hello world!\"\n# Strings can be added without using '+'\n\"Hello \" \"world!\"  # => \"Hello world!\"\n\n# ... or multiplied\n\"Hello\" * 3  # => \"HelloHelloHello\"\n\n# A string can be treated like a list of characters\n\"This is a string\"[0]  # => 'T'\n\n# You can find the length of a string\nlen(\"This is a string\")  # => 16\n\n# String formatting with %\n# Even though the % string operator will be deprecated on Python 3.1 and removed\n# later at some time, it may still be good to know how it works.\nx = 'apple'\ny = 'lemon'\nz = \"The items in the basket are %s and %s\" % (x, y)\n\n# A newer way to format strings is the format method.\n# This method is the preferred way\n\"{} is a {}\".format(\"This\", \"placeholder\")\n\"{0} can be {1}\".format(\"strings\", \"formatted\")\n# You can use keywords if you don't want to count.\n\"{name} wants to eat {food}\".format(name=\"Bob\", food=\"lasagna\")\n\n# None is an object\nNone  # => None\n\n# Don't use the equality \"==\" symbol to compare objects to None\n# Use \"is\" instead\n\"etc\" is None  # => False\nNone is None  # => True\n\n# The 'is' operator tests for object identity. This isn't\n# very useful when dealing with primitive values, but is\n# very useful when dealing with objects.\n\n# Any object can be used in a Boolean context.\n# The following values are considered falsey:\n#    - None\n#    - zero of any numeric type (e.g., 0, 0L, 0.0, 0j)\n#    - empty sequences (e.g., '', (), [])\n#    - empty containers (e.g., {}, set())\n#    - instances of user-defined classes meeting certain conditions\n#      see: https://docs.python.org/2/reference/datamodel.html#object.__nonzero__\n#\n# All other values are truthy (using the bool() function on them returns True).\nbool(0)  # => False\nbool(\"\")  # => False\n\n\n####################################################\n# 2. Variables and Collections\n####################################################\n\n# Python has a print statement\nprint \"I'm Python. Nice to meet you!\"  # => I'm Python. Nice to meet you!\n\n# Simple way to get input data from console\ninput_string_var = raw_input(\n    \"Enter some data: \")  # Returns the data as a string\ninput_var = input(\"Enter some data: \")  # Evaluates the data as python code\n# Warning: Caution is recommended for input() method usage\n# Note: In python 3, input() is deprecated and raw_input() is renamed to input()\n\n# No need to declare variables before assigning to them.\nsome_var = 5  # Convention is to use lower_case_with_underscores\nsome_var  # => 5\n\n# Accessing a previously unassigned variable is an exception.\n# See Control Flow to learn more about exception handling.\nsome_other_var  # Raises a name error\n\n# if can be used as an expression\n# Equivalent of C's '?:' ternary operator\n\"yahoo!\" if 3 > 2 else 2  # => \"yahoo!\"\n\n# Lists store sequences\nli = []\n# You can start with a prefilled list\nother_li = [4, 5, 6]\n\n# Add stuff to the end of a list with append\nli.append(1)  # li is now [1]\nli.append(2)  # li is now [1, 2]\nli.append(4)  # li is now [1, 2, 4]\nli.append(3)  # li is now [1, 2, 4, 3]\n# Remove from the end with pop\nli.pop()  # => 3 and li is now [1, 2, 4]\n# Let's put it back\nli.append(3)  # li is now [1, 2, 4, 3] again.\n\n# Access a list like you would any array\nli[0]  # => 1\n# Assign new values to indexes that have already been initialized with =\nli[0] = 42\nli[0]  # => 42\nli[0] = 1  # Note: setting it back to the original value\n# Look at the last element\nli[-1]  # => 3\n\n# Looking out of bounds is an IndexError\nli[4]  # Raises an IndexError\n\n# You can look at ranges with slice syntax.\n# (It's a closed/open range for you mathy types.)\nli[1:3]  # => [2, 4]\n# Omit the beginning\nli[2:]  # => [4, 3]\n# Omit the end\nli[:3]  # => [1, 2, 4]\n# Select every second entry\nli[::2]  # =>[1, 4]\n# Reverse a copy of the list\nli[::-1]  # => [3, 4, 2, 1]\n# Use any combination of these to make advanced slices\n# li[start:end:step]\n\n# Remove arbitrary elements from a list with \"del\"\ndel li[2]  # li is now [1, 2, 3]\n\n# You can add lists\nli + other_li  # => [1, 2, 3, 4, 5, 6]\n# Note: values for li and for other_li are not modified.\n\n# Concatenate lists with \"extend()\"\nli.extend(other_li)  # Now li is [1, 2, 3, 4, 5, 6]\n\n# Remove first occurrence of a value\nli.remove(2)  # li is now [1, 3, 4, 5, 6]\nli.remove(2)  # Raises a ValueError as 2 is not in the list\n\n# Insert an element at a specific index\nli.insert(1, 2)  # li is now [1, 2, 3, 4, 5, 6] again\n\n# Get the index of the first item found\nli.index(2)  # => 1\nli.index(7)  # Raises a ValueError as 7 is not in the list\n\n# Check for existence in a list with \"in\"\n1 in li  # => True\n\n# Examine the length with \"len()\"\nlen(li)  # => 6\n\n# Tuples are like lists but are immutable.\ntup = (1, 2, 3)\ntup[0]  # => 1\ntup[0] = 3  # Raises a TypeError\n\n# You can do all those list thingies on tuples too\nlen(tup)  # => 3\ntup + (4, 5, 6)  # => (1, 2, 3, 4, 5, 6)\ntup[:2]  # => (1, 2)\n2 in tup  # => True\n\n# You can unpack tuples (or lists) into variables\na, b, c = (1, 2, 3)  # a is now 1, b is now 2 and c is now 3\nd, e, f = 4, 5, 6  # you can leave out the parentheses\n# Tuples are created by default if you leave out the parentheses\ng = 4, 5, 6  # => (4, 5, 6)\n# Now look how easy it is to swap two values\ne, d = d, e  # d is now 5 and e is now 4\n\n# Dictionaries store mappings\nempty_dict = {}\n# Here is a prefilled dictionary\nfilled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}\n\n# Look up values with []\nfilled_dict[\"one\"]  # => 1\n\n# Get all keys as a list with \"keys()\"\nfilled_dict.keys()  # => [\"three\", \"two\", \"one\"]\n# Note - Dictionary key ordering is not guaranteed.\n# Your results might not match this exactly.\n\n# Get all values as a list with \"values()\"\nfilled_dict.values()  # => [3, 2, 1]\n# Note - Same as above regarding key ordering.\n\n# Get all key-value pairs as a list of tuples with \"items()\"\nfilled_dict.items()  # => [(\"one\", 1), (\"two\", 2), (\"three\", 3)]\n\n# Check for existence of keys in a dictionary with \"in\"\n\"one\" in filled_dict  # => True\n1 in filled_dict  # => False\n\n# Looking up a non-existing key is a KeyError\nfilled_dict[\"four\"]  # KeyError\n\n# Use \"get()\" method to avoid the KeyError\nfilled_dict.get(\"one\")  # => 1\nfilled_dict.get(\"four\")  # => None\n# The get method supports a default argument when the value is missing\nfilled_dict.get(\"one\", 4)  # => 1\nfilled_dict.get(\"four\", 4)  # => 4\n# note that filled_dict.get(\"four\") is still => None\n# (get doesn't set the value in the dictionary)\n\n# set the value of a key with a syntax similar to lists\nfilled_dict[\"four\"] = 4  # now, filled_dict[\"four\"] => 4\n\n# \"setdefault()\" inserts into a dictionary only if the given key isn't present\nfilled_dict.setdefault(\"five\", 5)  # filled_dict[\"five\"] is set to 5\nfilled_dict.setdefault(\"five\", 6)  # filled_dict[\"five\"] is still 5\n\n# You can declare sets (which are like unordered lists that cannot contain\n# duplicate values) using the set object.\nempty_set = set()\n# Initialize a \"set()\" with a bunch of values\nsome_set = set([1, 2, 2, 3, 4])  # some_set is now set([1, 2, 3, 4])\n\n# order is not guaranteed, even though it may sometimes look sorted\nanother_set = set([4, 3, 2, 2, 1])  # another_set is now set([1, 2, 3, 4])\n\n# Since Python 2.7, {} can be used to declare a set\nfilled_set = {1, 2, 2, 3, 4}  # => {1, 2, 3, 4}\n\n# Add more items to a set\nfilled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}\n\n# Do set intersection with &\nother_set = {3, 4, 5, 6}\nfilled_set & other_set  # => {3, 4, 5}\n\n# Do set union with |\nfilled_set | other_set  # => {1, 2, 3, 4, 5, 6}\n\n# Do set difference with -\n{1, 2, 3, 4} - {2, 3, 5}  # => {1, 4}\n\n# Do set symmetric difference with ^\n{1, 2, 3, 4} ^ {2, 3, 5}  # => {1, 4, 5}\n\n# Check if set on the left is a superset of set on the right\n{1, 2} >= {1, 2, 3}  # => False\n\n# Check if set on the left is a subset of set on the right\n{1, 2} <= {1, 2, 3}  # => True\n\n# Check for existence in a set with in\n2 in filled_set  # => True\n10 in filled_set  # => False\n10 not in filled_set # => True\n\n# Check data type of variable\ntype(li)   # => list\ntype(filled_dict)   # => dict\ntype(5)   # => int\n\n\n####################################################\n#  3. Control Flow\n####################################################\n\n# Let's just make a variable\nsome_var = 5\n\n# Here is an if statement. Indentation is significant in python!\n# prints \"some_var is smaller than 10\"\nif some_var > 10:\n    print \"some_var is totally bigger than 10.\"\nelif some_var < 10:  # This elif clause is optional.\n    print \"some_var is smaller than 10.\"\nelse:  # This is optional too.\n    print \"some_var is indeed 10.\"\n\n\"\"\"\nFor loops iterate over lists\nprints:\n    dog is a mammal\n    cat is a mammal\n    mouse is a mammal\n\"\"\"\nfor animal in [\"dog\", \"cat\", \"mouse\"]:\n    # You can use {0} to interpolate formatted strings. (See above.)\n    print \"{0} is a mammal\".format(animal)\n\n\"\"\"\n\"range(number)\" returns a list of numbers\nfrom zero to the given number\nprints:\n    0\n    1\n    2\n    3\n\"\"\"\nfor i in range(4):\n    print i\n\n\"\"\"\n\"range(lower, upper)\" returns a list of numbers\nfrom the lower number to the upper number\nprints:\n    4\n    5\n    6\n    7\n\"\"\"\nfor i in range(4, 8):\n    print i\n\n\"\"\"\nWhile loops go until a condition is no longer met.\nprints:\n    0\n    1\n    2\n    3\n\"\"\"\nx = 0\nwhile x < 4:\n    print x\n    x += 1  # Shorthand for x = x + 1\n\n# Handle exceptions with a try/except block\n\n# Works on Python 2.6 and up:\ntry:\n    # Use \"raise\" to raise an error\n    raise IndexError(\"This is an index error\")\nexcept IndexError as e:\n    pass  # Pass is just a no-op. Usually you would do recovery here.\nexcept (TypeError, NameError):\n    pass  # Multiple exceptions can be handled together, if required.\nelse:  # Optional clause to the try/except block. Must follow all except blocks\n    print \"All good!\"  # Runs only if the code in try raises no exceptions\nfinally:  # Execute under all circumstances\n    print \"We can clean up resources here\"\n\n# Instead of try/finally to cleanup resources you can use a with statement\nwith open(\"myfile.txt\") as f:\n    for line in f:\n        print line\n\n\n####################################################\n# 4. Functions\n####################################################\n\n# Use \"def\" to create new functions\ndef add(x, y):\n    print \"x is {0} and y is {1}\".format(x, y)\n    return x + y  # Return values with a return statement\n\n\n# Calling functions with parameters\nadd(5, 6)  # => prints out \"x is 5 and y is 6\" and returns 11\n\n# Another way to call functions is with keyword arguments\nadd(y=6, x=5)  # Keyword arguments can arrive in any order.\n\n\n# You can define functions that take a variable number of\n# positional args, which will be interpreted as a tuple by using *\ndef varargs(*args):\n    return args\n\n\nvarargs(1, 2, 3)  # => (1, 2, 3)\n\n\n# You can define functions that take a variable number of\n# keyword args, as well, which will be interpreted as a dict by using **\ndef keyword_args(**kwargs):\n    return kwargs\n\n\n# Let's call it to see what happens\nkeyword_args(big=\"foot\", loch=\"ness\")  # => {\"big\": \"foot\", \"loch\": \"ness\"}\n\n\n# You can do both at once, if you like\ndef all_the_args(*args, **kwargs):\n    print args\n    print kwargs\n\n\n\"\"\"\nall_the_args(1, 2, a=3, b=4) prints:\n    (1, 2)\n    {\"a\": 3, \"b\": 4}\n\"\"\"\n\n# When calling functions, you can do the opposite of args/kwargs!\n# Use * to expand positional args and use ** to expand keyword args.\nargs = (1, 2, 3, 4)\nkwargs = {\"a\": 3, \"b\": 4}\nall_the_args(*args)  # equivalent to all_the_args(1, 2, 3, 4)\nall_the_args(**kwargs)  # equivalent to all_the_args(a=3, b=4)\nall_the_args(*args, **kwargs)  # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)\n\n\n# you can pass args and kwargs along to other functions that take args/kwargs\n# by expanding them with * and ** respectively\ndef pass_all_the_args(*args, **kwargs):\n    all_the_args(*args, **kwargs)\n    print varargs(*args)\n    print keyword_args(**kwargs)\n\n\n# Function Scope\nx = 5\n\n\ndef set_x(num):\n    # Local var x not the same as global variable x\n    x = num  # => 43\n    print x  # => 43\n\n\ndef set_global_x(num):\n    global x\n    print x  # => 5\n    x = num  # global var x is now set to 6\n    print x  # => 6\n\n\nset_x(43)\nset_global_x(6)\n\n\n# Python has first class functions\ndef create_adder(x):\n    def adder(y):\n        return x + y\n\n    return adder\n\n\nadd_10 = create_adder(10)\nadd_10(3)  # => 13\n\n# There are also anonymous functions\n(lambda x: x > 2)(3)  # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5\n\n# There are built-in higher order functions\nmap(add_10, [1, 2, 3])  # => [11, 12, 13]\nmap(max, [1, 2, 3], [4, 2, 1])  # => [4, 2, 3]\n\nfilter(lambda x: x > 5, [3, 4, 5, 6, 7])  # => [6, 7]\n\n# We can use list comprehensions for nice maps and filters\n[add_10(i) for i in [1, 2, 3]]  # => [11, 12, 13]\n[x for x in [3, 4, 5, 6, 7] if x > 5]  # => [6, 7]\n\n# You can construct set and dict comprehensions as well.\n{x for x in 'abcddeef' if x in 'abc'}  # => {'a', 'b', 'c'}\n{x: x ** 2 for x in range(5)}  # => {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n\n\n####################################################\n# 5. Classes\n####################################################\n\n# We subclass from object to get a class.\nclass Human(object):\n    # A class attribute. It is shared by all instances of this class\n    species = \"H. sapiens\"\n\n    # Basic initializer, this is called when this class is instantiated.\n    # Note that the double leading and trailing underscores denote objects\n    # or attributes that are used by python but that live in user-controlled\n    # namespaces. You should not invent such names on your own.\n    def __init__(self, name):\n        # Assign the argument to the instance's name attribute\n        self.name = name\n\n        # Initialize property\n        self.age = 0\n\n    # An instance method. All methods take \"self\" as the first argument\n    def say(self, msg):\n        return \"{0}: {1}\".format(self.name, msg)\n\n    # A class method is shared among all instances\n    # They are called with the calling class as the first argument\n    @classmethod\n    def get_species(cls):\n        return cls.species\n\n    # A static method is called without a class or instance reference\n    @staticmethod\n    def grunt():\n        return \"*grunt*\"\n\n    # A property is just like a getter.\n    # It turns the method age() into an read-only attribute\n    # of the same name.\n    @property\n    def age(self):\n        return self._age\n\n    # This allows the property to be set\n    @age.setter\n    def age(self, age):\n        self._age = age\n\n    # This allows the property to be deleted\n    @age.deleter\n    def age(self):\n        del self._age\n\n\n# Instantiate a class\ni = Human(name=\"Ian\")\nprint i.say(\"hi\")  # prints out \"Ian: hi\"\n\nj = Human(\"Joel\")\nprint j.say(\"hello\")  # prints out \"Joel: hello\"\n\n# Call our class method\ni.get_species()  # => \"H. sapiens\"\n\n# Change the shared attribute\nHuman.species = \"H. neanderthalensis\"\ni.get_species()  # => \"H. neanderthalensis\"\nj.get_species()  # => \"H. neanderthalensis\"\n\n# Call the static method\nHuman.grunt()  # => \"*grunt*\"\n\n# Update the property\ni.age = 42\n\n# Get the property\ni.age  # => 42\n\n# Delete the property\ndel i.age\ni.age  # => raises an AttributeError\n\n####################################################\n# 6. Modules\n####################################################\n\n# You can import modules\nimport math\n\nprint math.sqrt(16)  # => 4.0\n\n# You can get specific functions from a module\nfrom math import ceil, floor\n\nprint ceil(3.7)  # => 4.0\nprint floor(3.7)  # => 3.0\n\n# You can import all functions from a module.\n# Warning: this is not recommended\nfrom math import *\n\n# You can shorten module names\nimport math as m\n\nmath.sqrt(16) == m.sqrt(16)  # => True\n# you can also test that the functions are equivalent\nfrom math import sqrt\n\nmath.sqrt == m.sqrt == sqrt  # => True\n\n# Python modules are just ordinary python files. You\n# can write your own, and import them. The name of the\n# module is the same as the name of the file.\n\n# You can find out which functions and attributes\n# defines a module.\nimport math\n\ndir(math)\n\n\n# If you have a Python script named math.py in the same\n# folder as your current script, the file math.py will\n# be loaded instead of the built-in Python module.\n# This happens because the local folder has priority\n# over Python's built-in libraries.\n\n\n####################################################\n# 7. Advanced\n####################################################\n\n# Generators\n# A generator \"generates\" values as they are requested instead of storing\n# everything up front\n\n# The following method (*NOT* a generator) will double all values and store it\n# in `double_arr`. For large size of iterables, that might get huge!\ndef double_numbers(iterable):\n    double_arr = []\n    for i in iterable:\n        double_arr.append(i + i)\n    return double_arr\n\n\n# Running the following would mean we'll double all values first and return all\n# of them back to be checked by our condition\nfor value in double_numbers(range(1000000)):  # `test_non_generator`\n    print value\n    if value > 5:\n        break\n\n\n# We could instead use a generator to \"generate\" the doubled value as the item\n# is being requested\ndef double_numbers_generator(iterable):\n    for i in iterable:\n        yield i + i\n\n\n# Running the same code as before, but with a generator, now allows us to iterate\n# over the values and doubling them one by one as they are being consumed by\n# our logic. Hence as soon as we see a value > 5, we break out of the\n# loop and don't need to double most of the values sent in (MUCH FASTER!)\nfor value in double_numbers_generator(xrange(1000000)):  # `test_generator`\n    print value\n    if value > 5:\n        break\n\n# BTW: did you notice the use of `range` in `test_non_generator` and `xrange` in `test_generator`?\n# Just as `double_numbers_generator` is the generator version of `double_numbers`\n# We have `xrange` as the generator version of `range`\n# `range` would return back and array with 1000000 values for us to use\n# `xrange` would generate 1000000 values for us as we request / iterate over those items\n\n# Just as you can create a list comprehension, you can create generator\n# comprehensions as well.\nvalues = (-x for x in [1, 2, 3, 4, 5])\nfor x in values:\n    print(x)  # prints -1 -2 -3 -4 -5 to console/terminal\n\n# You can also cast a generator comprehension directly to a list.\nvalues = (-x for x in [1, 2, 3, 4, 5])\ngen_to_list = list(values)\nprint(gen_to_list)  # => [-1, -2, -3, -4, -5]\n\n# Decorators\n# A decorator is a higher order function, which accepts and returns a function.\n# Simple usage example – add_apples decorator will add 'Apple' element into\n# fruits list returned by get_fruits target function.\ndef add_apples(func):\n    def get_fruits():\n        fruits = func()\n        fruits.append('Apple')\n        return fruits\n    return get_fruits\n\n@add_apples\ndef get_fruits():\n    return ['Banana', 'Mango', 'Orange']\n\n# Prints out the list of fruits with 'Apple' element in it:\n# Banana, Mango, Orange, Apple\nprint ', '.join(get_fruits())\n\n# in this example beg wraps say\n# Beg will call say. If say_please is True then it will change the returned\n# message\nfrom functools import wraps\n\n\ndef beg(target_function):\n    @wraps(target_function)\n    def wrapper(*args, **kwargs):\n        msg, say_please = target_function(*args, **kwargs)\n        if say_please:\n            return \"{} {}\".format(msg, \"Please! I am poor :(\")\n        return msg\n\n    return wrapper\n\n\n@beg\ndef say(say_please=False):\n    msg = \"Can you buy me a beer?\"\n    return msg, say_please\n\n\nprint say()  # Can you buy me a beer?\nprint say(say_please=True)  # Can you buy me a beer? Please! I am poor :(\n```\n\n## Ready For More?\n\n### Free Online\n\n* [Automate the Boring Stuff with Python](https://automatetheboringstuff.com)\n* [Learn Python The Hard Way](http://learnpythonthehardway.org/book/)\n* [Dive Into Python](http://www.diveintopython.net/)\n* [The Official Docs](http://docs.python.org/2/)\n* [Hitchhiker's Guide to Python](http://docs.python-guide.org/en/latest/)\n* [Python Module of the Week](http://pymotw.com/2/)\n* [A Crash Course in Python for Scientists](http://nbviewer.ipython.org/5920182)\n* [First Steps With Python](https://realpython.com/learn/python-first-steps/)\n* [LearnPython](http://www.learnpython.org/)\n* [Fullstack Python](https://www.fullstackpython.com/)\n\n### Dead Tree\n\n* [Programming Python](http://www.amazon.com/gp/product/0596158106/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0596158106&linkCode=as2&tag=homebits04-20)\n* [Dive Into Python](http://www.amazon.com/gp/product/1441413022/ref=as_li_tf_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1441413022&linkCode=as2&tag=homebits04-20)\n* [Python Essential Reference](http://www.amazon.com/gp/product/0672329786/ref=as_li_tf_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0672329786&linkCode=as2&tag=homebits04-20)"
