
package pages

const Zfs = "[ZFS](http://open-zfs.org/wiki/Main_Page)\nis a rethinking of the storage stack, combining traditional file systems as well as volume\nmanagers into one cohesive tool.  ZFS has some specific terminology that sets it apart from\nmore traditional storage systems, however it has a great set of features with a focus on\nusability for systems administrators.\n\n\n## ZFS Concepts\n\n### Virtual Devices\n\nA VDEV is similar to a raid device presented by a RAID card, there are several different\ntypes of VDEV's that offer various advantages, including redundancy and speed.  In general\nVDEV's offer better reliability and safety than a RAID card.  It is discouraged to use a\nRAID setup with ZFS, as ZFS expects to directly manage the underlying disks.\n\nTypes of VDEV's\n\n* stripe (a single disk, no redundancy)\n* mirror (n-way mirrors supported)\n* raidz\n\t* raidz1 (1-disk parity, similar to RAID 5)\n\t* raidz2 (2-disk parity, similar to RAID 6)\n\t* raidz3 (3-disk parity, no RAID analog)\n* disk\n* file (not recommended for production due to another filesystem adding unnecessary layering)\n\nYour data is striped across all the VDEV's present in your Storage Pool, so more VDEV's will\nincrease your IOPS.\n\n### Storage Pools\n\nZFS uses Storage Pools as an abstraction over the lower level storage provider (VDEV), allow\nyou to separate the user visible file system from the physical layout.\n\n### ZFS Dataset\n\nZFS datasets are analogous to traditional filesystems but with many more features.  They\nprovide many of ZFS's advantages.  Datasets support [Copy on Write](https://en.wikipedia.org/wiki/Copy-on-write)\nsnapshots, quota's, compression and de-duplication.\n\n\n### Limits\n\nOne directory may contain up to 2^48 files, up to 16 exabytes each.  A single storage pool\ncan contain up to 256 zettabytes (2^78) of space, and can be striped across 2^64 devices.  A\nsingle host can have 2^64 storage pools.  The limits are huge.\n\n\n## Commands\n\n### Storage Pools\n\nActions:\n\n* List\n* Status\n* Destroy\n* Get/Set properties\n\nList zpools\n\n```bash\n# Create a raidz zpool\n$ zpool create bucket raidz1 gpt/zfs0 gpt/zfs1 gpt/zfs2\n\n# List ZPools\n$ zpool list\nNAME    SIZE  ALLOC   FREE  EXPANDSZ   FRAG    CAP  DEDUP  HEALTH  ALTROOT\nzroot   141G   106G  35.2G         -    43%    75%  1.00x  ONLINE  -\n\n# List detailed information about a specific zpool\n$ zpool list -v zroot\nNAME                                     SIZE  ALLOC   FREE  EXPANDSZ   FRAG    CAP  DEDUP HEALTH  ALTROOT\nzroot                                    141G   106G  35.2G         -    43%    75%  1.00x ONLINE  -\n  gptid/c92a5ccf-a5bb-11e4-a77d-001b2172c655   141G   106G  35.2G         -    43%    75%\n```\n\nStatus of zpools\n\n```bash\n# Get status information about zpools\n$ zpool status\n  pool: zroot\n state: ONLINE\n  scan: scrub repaired 0 in 2h51m with 0 errors on Thu Oct  1 07:08:31 2015\nconfig:\n\n        NAME                                          STATE     READ WRITE CKSUM\n        zroot                                         ONLINE       0     0     0\n          gptid/c92a5ccf-a5bb-11e4-a77d-001b2172c655  ONLINE       0     0     0\n\nerrors: No known data errors\n\n# Scrubbing a zpool to correct any errors\n$ zpool scrub zroot\n$ zpool status -v zroot\n  pool: zroot\n state: ONLINE\n  scan: scrub in progress since Thu Oct 15 16:59:14 2015\n        39.1M scanned out of 106G at 1.45M/s, 20h47m to go\n        0 repaired, 0.04% done\nconfig:\n\n        NAME                                          STATE     READ WRITE CKSUM\n        zroot                                         ONLINE       0     0     0\n          gptid/c92a5ccf-a5bb-11e4-a77d-001b2172c655  ONLINE       0     0     0\n\nerrors: No known data errors\n```\n\nProperties of zpools\n\n```bash\n\n# Getting properties from the pool properties can be user set or system provided.\n$ zpool get all zroot\nNAME   PROPERTY                       VALUE                          SOURCE\nzroot  size                           141G                           -\nzroot  capacity                       75%                            -\nzroot  altroot                        -                              default\nzroot  health                         ONLINE                         -\n...\n\n# Setting a zpool property\n$ zpool set comment=\"Storage of mah stuff\" zroot\n$ zpool get comment\nNAME   PROPERTY  VALUE                 SOURCE\ntank   comment   -                     default\nzroot  comment   Storage of mah stuff  local\n```\n\nRemove zpool\n\n```bash\n$ zpool destroy test\n```\n\n\n### Datasets\n\nActions:\n\n* Create\n* List\n* Rename\n* Delete\n* Get/Set properties\n\nCreate datasets\n\n```bash\n# Create dataset\n$ zfs create tank/root/data\n$ mount | grep data\ntank/root/data on /data (zfs, local, nfsv4acls)\n\n# Create child dataset\n$ zfs create tank/root/data/stuff\n$ mount | grep data\ntank/root/data on /data (zfs, local, nfsv4acls)\ntank/root/data/stuff on /data/stuff (zfs, local, nfsv4acls)\n\n\n# Create Volume\n$ zfs create -V zroot/win_vm\n$ zfs list zroot/win_vm\nNAME                 USED  AVAIL  REFER  MOUNTPOINT\ntank/win_vm         4.13G  17.9G    64K  -\n```\n\nList datasets\n\n```bash\n# List all datasets\n$ zfs list\nNAME                                                                       USED  AVAIL  REFER  MOUNTPOINT\nzroot                                                                      106G  30.8G   144K  none\nzroot/ROOT                                                                18.5G  30.8G   144K  none\nzroot/ROOT/10.1                                                              8K  30.8G  9.63G  /\nzroot/ROOT/default                                                        18.5G  30.8G  11.2G  /\nzroot/backup                                                              5.23G  30.8G   144K  none\nzroot/home                                                                 288K  30.8G   144K  none\n...\n\n# List a specific dataset\n$ zfs list zroot/home\nNAME         USED  AVAIL  REFER  MOUNTPOINT\nzroot/home   288K  30.8G   144K  none\n\n# List snapshots\n$ zfs list -t snapshot\nzroot@daily-2015-10-15                                                                  0      -   144K  -\nzroot/ROOT@daily-2015-10-15                                                             0      -   144K  -\nzroot/ROOT/default@daily-2015-10-15                                                     0      -  24.2G  -\nzroot/tmp@daily-2015-10-15                                                           124K      -   708M  -\nzroot/usr@daily-2015-10-15                                                              0      -   144K  -\nzroot/home@daily-2015-10-15                                                             0      -  11.9G  -\nzroot/var@daily-2015-10-15                                                           704K      -  1.42G  -\nzroot/var/log@daily-2015-10-15                                                       192K      -   828K  -\nzroot/var/tmp@daily-2015-10-15                                                          0      -   152K  -\n```\n\nRename datasets\n\n```bash\n$ zfs rename tank/root/home tank/root/old_home\n$ zfs rename tank/root/new_home tank/root/home\n```\n\nDelete dataset\n\n```bash\n# Datasets cannot be deleted if they have any snapshots\n$ zfs destroy tank/root/home\n```\n\nGet / set properties of a dataset\n\n```bash\n# Get all properties\n$ zfs get all  zroot/usr/home                                                                                              │157 # Create Volume\nNAME            PROPERTY              VALUE                  SOURCE                                                                          │158 $ zfs create -V zroot/win_vm\nzroot/home      type                  filesystem             -                                                                               │159 $ zfs list zroot/win_vm\nzroot/home      creation              Mon Oct 20 14:44 2014  -                                                                               │160 NAME                 USED  AVAIL  REFER  MOUNTPOINT\nzroot/home      used                  11.9G                  -                                                                               │161 tank/win_vm         4.13G  17.9G    64K  -\nzroot/home      available             94.1G                  -                                                                               │162 ```\nzroot/home      referenced            11.9G                  -                                                                               │163\nzroot/home      mounted               yes                    -\n...\n\n# Get property from dataset\n$ zfs get compression zroot/usr/home\nNAME            PROPERTY     VALUE     SOURCE\nzroot/home      compression  off       default\n\n# Set property on dataset\n$ zfs set compression=gzip-9 mypool/lamb\n\n# Get a set of properties from all datasets\n$ zfs list -o name,quota,reservation\nNAME                                                               QUOTA  RESERV\nzroot                                                               none    none\nzroot/ROOT                                                          none    none\nzroot/ROOT/default                                                  none    none\nzroot/tmp                                                           none    none\nzroot/usr                                                           none    none\nzroot/home                                                          none    none\nzroot/var                                                           none    none\n...\n```\n\n\n### Snapshots\n\nZFS snapshots are one of the things about zfs that are a really big deal\n\n* The space they take up is equal to the difference in data between the filesystem and its snapshot\n* Creation time is only seconds\n* Recovery is as fast as you can write data.\n* They are easy to automate.\n\nActions:\n\n* Create\n* Delete\n* Rename\n* Access snapshots\n* Send / Receive\n* Clone\n\n\nCreate snapshots\n\n```bash\n# Create a snapshot of a single dataset\nzfs snapshot tank/home/sarlalian@now\n\n# Create a snapshot of a dataset and its children\n$ zfs snapshot -r tank/home@now\n$ zfs list -t snapshot\nNAME                       USED  AVAIL  REFER  MOUNTPOINT\ntank/home@now                 0      -    26K  -\ntank/home/sarlalian@now       0      -   259M  -\ntank/home/alice@now           0      -   156M  -\ntank/home/bob@now             0      -   156M  -\n...\n```\n\nDestroy snapshots\n\n```bash\n# How to destroy a snapshot\n$ zfs destroy tank/home/sarlalian@now\n\n# Delete a snapshot on a parent dataset and its children\n$ zfs destroy -r tank/home/sarlalian@now\n\n```\n\nRenaming Snapshots\n\n```bash\n# Rename a snapshot\n$ zfs rename tank/home/sarlalian@now tank/home/sarlalian@today\n$ zfs rename tank/home/sarlalian@now today\n\n$ zfs rename -r tank/home@now @yesterday\n```\n\nAccessing snapshots\n\n```bash\n# CD into a snapshot directory\n$ cd /home/.zfs/snapshot/\n```\n\nSending and Receiving\n\n```bash\n# Backup a snapshot to a file\n$ zfs send tank/home/sarlalian@now | gzip > backup_file.gz\n\n# Send a snapshot to another dataset\n$ zfs send tank/home/sarlalian@now | zfs recv backups/home/sarlalian\n\n# Send a snapshot to a remote host\n$ zfs send tank/home/sarlalian@now | ssh root@backup_server 'zfs recv tank/home/sarlalian'\n\n# Send full dataset with snapshots to new host\n$ zfs send -v -R tank/home@now | ssh root@backup_server 'zfs recv tank/home'\n```\n\nCloning Snapshots\n\n```bash\n# Clone a snapshot\n$ zfs clone tank/home/sarlalian@now tank/home/sarlalian_new\n\n# Promoting the clone so it is no longer dependent on the snapshot\n$ zfs promote tank/home/sarlalian_new\n```\n\n### Putting it all together\n\nThis following a script utilizing FreeBSD, jails and ZFS to automate\nprovisioning a clean copy of a mysql staging database from a live replication\nslave.\n\n```bash\n#!/bin/sh\n\necho \"==== Stopping the staging database server ====\"\njail -r staging\n\necho \"==== Cleaning up existing staging server and snapshot ====\"\nzfs destroy -r zroot/jails/staging\nzfs destroy zroot/jails/slave@staging\n\necho \"==== Quiescing the slave database ====\"\necho \"FLUSH TABLES WITH READ LOCK;\" | /usr/local/bin/mysql -u root -pmyrootpassword -h slave\n\necho \"==== Snapshotting the slave db filesystem as zroot/jails/slave@staging ====\"\nzfs snapshot zroot/jails/slave@staging\n\necho \"==== Starting the slave database server ====\"\njail -c slave\n\necho \"==== Cloning the slave snapshot to the staging server ====\"\nzfs clone zroot/jails/slave@staging zroot/jails/staging\n\necho \"==== Installing the staging mysql config ====\"\nmv /jails/staging/usr/local/etc/my.cnf /jails/staging/usr/local/etc/my.cnf.slave\ncp /jails/staging/usr/local/etc/my.cnf.staging /jails/staging/usr/local/etc/my.cnf\n\necho \"==== Setting up the staging rc.conf file ====\"\nmv /jails/staging/etc/rc.conf.local /jails/staging/etc/rc.conf.slave\nmv /jails/staging/etc/rc.conf.staging /jails/staging/etc/rc.conf.local\n\necho \"==== Starting the staging db server ====\"\njail -c staging\n\necho \"==== Makes the staging database not pull from the master ====\"\necho \"STOP SLAVE;\" | /usr/local/bin/mysql -u root -pmyrootpassword -h staging\necho \"RESET SLAVE;\" | /usr/local/bin/mysql -u root -pmyrootpassword -h staging\n```\n\n\n### Additional Reading\n\n* [BSDNow's Crash Course on ZFS](http://www.bsdnow.tv/tutorials/zfs)\n* [FreeBSD Handbook on ZFS](https://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/zfs.html)\n* [BSDNow's Crash Course on ZFS](http://www.bsdnow.tv/tutorials/zfs)\n* [Oracle's Tuning Guide](http://www.oracle.com/technetwork/articles/servers-storage-admin/sto-recommended-zfs-settings-1951715.html)\n* [OpenZFS Tuning Guide](http://open-zfs.org/wiki/Performance_tuning)\n* [FreeBSD ZFS Tuning Guide](https://wiki.freebsd.org/ZFSTuningGuide)"
