
package pages

const Hack = "Hack is a superset of PHP that runs under a virtual machine called HHVM. Hack\nis almost completely interoperable with existing PHP code and adds a bunch of\nuseful features from statically typed languages.\n\n\nOnly Hack-specific features are covered here. Details about PHP's syntax are\navailable in the [PHP article](http://learnxinyminutes.com/docs/php/) on this site.\n\n```php\n<?hh\n\n// Hack syntax is only enabled for files starting with an <?hh marker\n// <?hh markers cannot be interspersed with HTML the way <?php can be.\n// Using the marker \"<?hh //strict\" puts the type checker in strict mode.\n\n\n// Scalar parameter type hints\nfunction repeat(string $word, int $count)\n{\n    $word = trim($word);\n    return str_repeat($word . ' ', $count);\n}\n\n// Type hints for return values\nfunction add(...$numbers) : int\n{\n    return array_sum($numbers);\n}\n\n// Functions that return nothing are hinted as \"void\"\nfunction truncate(resource $handle) : void\n{\n    // ...\n}\n\n// Type hints must explicitly allow being nullable\nfunction identity(?string $stringOrNull) : ?string\n{\n    return $stringOrNull;\n}\n\n// Type hints can be specified on class properties\nclass TypeHintedProperties\n{\n    public ?string $name;\n\n    protected int $id;\n\n    private float $score = 100.0;\n\n    // Hack's type checker enforces that typed properties either have a\n    // default value or are set in the constructor.\n    public function __construct(int $id)\n    {\n        $this->id = $id;\n    }\n}\n\n\n// Concise anonymous functions (lambdas)\n$multiplier = 5;\narray_map($y ==> $y * $multiplier, [1, 2, 3]);\n\n\n// Generics\nclass Box<T>\n{\n    protected T $data;\n\n    public function __construct(T $data) {\n        $this->data = $data;\n    }\n\n    public function getData(): T {\n        return $this->data;\n    }\n}\n\nfunction openBox(Box<int> $box) : int\n{\n    return $box->getData();\n}\n\n\n// Shapes\n//\n// Hack adds the concept of shapes for defining struct-like arrays with a\n// guaranteed, type-checked set of keys\ntype Point2D = shape('x' => int, 'y' => int);\n\nfunction distance(Point2D $a, Point2D $b) : float\n{\n    return sqrt(pow($b['x'] - $a['x'], 2) + pow($b['y'] - $a['y'], 2));\n}\n\ndistance(\n    shape('x' => -1, 'y' => 5),\n    shape('x' => 2, 'y' => 50)\n);\n\n\n// Type aliasing\n//\n// Hack adds a bunch of type aliasing features for making complex types readable\nnewtype VectorArray = array<int, Vector<int>>;\n\n// A tuple containing two integers\nnewtype Point = (int, int);\n\nfunction addPoints(Point $p1, Point $p2) : Point\n{\n    return tuple($p1[0] + $p2[0], $p1[1] + $p2[1]);\n}\n\naddPoints(\n    tuple(1, 2),\n    tuple(5, 6)\n);\n\n\n// First-class enums\nenum RoadType : int\n{\n    Road = 0;\n    Street = 1;\n    Avenue = 2;\n    Boulevard = 3;\n}\n\nfunction getRoadType() : RoadType\n{\n    return RoadType::Avenue;\n}\n\n\n// Constructor argument promotion\n//\n// To avoid boilerplate property and constructor definitions that only set\n// properties, Hack adds a concise syntax for defining properties and a\n// constructor at the same time.\nclass ArgumentPromotion\n{\n    public function __construct(public string $name,\n                                protected int $age,\n                                private bool $isAwesome) {}\n}\n\nclass WithoutArgumentPromotion\n{\n    public string $name;\n\n    protected int $age;\n\n    private bool $isAwesome;\n\n    public function __construct(string $name, int $age, bool $isAwesome)\n    {\n        $this->name = $name;\n        $this->age = $age;\n        $this->isAwesome = $isAwesome;\n    }\n}\n\n\n// Co-operative multi-tasking\n//\n// Two new keywords \"async\" and \"await\" can be used to perform multi-tasking\n// Note that this does not involve threads - it just allows transfer of control\nasync function cooperativePrint(int $start, int $end) : Awaitable<void>\n{\n    for ($i = $start; $i <= $end; $i++) {\n        echo \"$i \";\n\n        // Give other tasks a chance to do something\n        await RescheduleWaitHandle::create(RescheduleWaitHandle::QUEUE_DEFAULT, 0);\n    }\n}\n\n// This prints \"1 4 7 2 5 8 3 6 9\"\nAwaitAllWaitHandle::fromArray([\n    cooperativePrint(1, 3),\n    cooperativePrint(4, 6),\n    cooperativePrint(7, 9)\n])->getWaitHandle()->join();\n\n\n// Attributes\n//\n// Attributes are a form of metadata for functions. Hack provides some\n// special built-in attributes that introduce useful behaviour.\n\n// The __Memoize special attribute causes the result of a function to be cached\n<<__Memoize>>\nfunction doExpensiveTask() : ?string\n{\n    return file_get_contents('http://example.com');\n}\n\n// The function's body is only executed once here:\ndoExpensiveTask();\ndoExpensiveTask();\n\n\n// The __ConsistentConstruct special attribute signals the Hack type checker to\n// ensure that the signature of __construct is the same for all subclasses.\n<<__ConsistentConstruct>>\nclass ConsistentFoo\n{\n    public function __construct(int $x, float $y)\n    {\n        // ...\n    }\n\n    public function someMethod()\n    {\n        // ...\n    }\n}\n\nclass ConsistentBar extends ConsistentFoo\n{\n    public function __construct(int $x, float $y)\n    {\n        // Hack's type checker enforces that parent constructors are called\n        parent::__construct($x, $y);\n\n        // ...\n    }\n\n    // The __Override annotation is an optional signal for the Hack type\n    // checker to enforce that this method is overriding a method in a parent\n    // or trait. If not, this will error.\n    <<__Override>>\n    public function someMethod()\n    {\n        // ...\n    }\n}\n\nclass InvalidFooSubclass extends ConsistentFoo\n{\n    // Not matching the parent constructor will cause a type checker error:\n    //\n    //  \"This object is of type ConsistentBaz. It is incompatible with this object\n    //   of type ConsistentFoo because some of their methods are incompatible\"\n    //\n    public function __construct(float $x)\n    {\n        // ...\n    }\n\n    // Using the __Override annotation on a non-overridden method will cause a\n    // type checker error:\n    //\n    //  \"InvalidFooSubclass::otherMethod() is marked as override; no non-private\n    //   parent definition found or overridden parent is defined in non-<?hh code\"\n    //\n    <<__Override>>\n    public function otherMethod()\n    {\n        // ...\n    }\n}\n\n\n// Traits can implement interfaces (standard PHP does not support this)\ninterface KittenInterface\n{\n    public function play() : void;\n}\n\ntrait CatTrait implements KittenInterface\n{\n    public function play() : void\n    {\n        // ...\n    }\n}\n\nclass Samuel\n{\n    use CatTrait;\n}\n\n\n$cat = new Samuel();\n$cat instanceof KittenInterface === true; // True\n\n```\n\n## More Information\n\nVisit the [Hack language reference](http://docs.hhvm.com/manual/en/hacklangref.php)\nfor detailed explanations of the features Hack adds to PHP, or the [official Hack website](http://hacklang.org/)\nfor more general information.\n\nVisit the [official HHVM website](http://hhvm.com/) for HHVM installation instructions.\n\nVisit [Hack's unsupported PHP features article](http://docs.hhvm.com/manual/en/hack.unsupported.php)\nfor details on the backwards incompatibility between Hack and PHP."
