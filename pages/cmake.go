
package pages

const Cmake = "CMake is a cross-platform, open-source build system. This tool allows you to test, \ncompile, and create packages of your source code.\n\nThe problem that CMake tries to solve is the problem of Makefiles and \nAutoconfigure on cross-platforms (different make interpreters have different \ncommands) and the ease-of-use on linking 3rd party libraries.\n\nCMake is an extensible, open-source system that manages the build process in \nan operating system and compiler-agnostic manner. Unlike many \ncross-platform systems, CMake is designed to be used in conjunction with the \nnative build environment. Simple configuration files placed in each source \ndirectory (called CMakeLists.txt files) are used to generate standard build \nfiles (e.g., makefiles on Unix and projects/workspaces in Windows MSVC) which \nare used in the usual way.\n\n```cmake\n# In CMake, this is a comment\n\n# To run our code, please perform the following commands:\n#  - mkdir build && cd build\n#  - cmake ..\n#  - make\n# \n# With those steps, we will follow the best practice to compile into a subdir\n# and the second line will request to CMake to generate a new OS-dependent\n# Makefile. Finally, run the native Make command.\n\n#------------------------------------------------------------------------------\n# Basic\n#------------------------------------------------------------------------------\n#\n# The CMake file MUST be named as \"CMakeLists.txt\".\n\n# Setup the minimum version required of CMake to generate the Makefile\ncmake_minimum_required (VERSION 2.8)\n\n# Raises a FATAL_ERROR if version < 2.8\ncmake_minimum_required (VERSION 2.8 FATAL_ERROR)\n\n# We define the name of our project, and this changes some directories\n# naming convention generated by CMake. We can send the LANG of code\n# as the second param\nproject (learncmake C)\n\n# Set the project source dir (just convention)\nset( LEARN_CMAKE_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR} )\nset( LEARN_CMAKE_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR} )\n\n# It's useful to set up the current version of our code in the build system\n# using a `semver` style\nset (LEARN_CMAKE_VERSION_MAJOR 1)\nset (LEARN_CMAKE_VERSION_MINOR 0)\nset (LEARN_CMAKE_VERSION_PATCH 0)\n\n# Send the variables (version number) to the source code header\nconfigure_file (\n  \"${PROJECT_SOURCE_DIR}/TutorialConfig.h.in\"\n  \"${PROJECT_BINARY_DIR}/TutorialConfig.h\"\n)\n\n# Include Directories\n# In GCC, this will invoke the \"-I\" command\ninclude_directories( include )\n\n# Where are the additional libraries installed? Note: provide includes\n# path here, subsequent checks will resolve everything else\nset( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/CMake/modules/\" )\n\n# Conditions\nif ( CONDITION )\n  # Output!\n\n  # Incidental information\n  message(STATUS \"My message\")\n\n  # CMake Warning, continue processing\n  message(WARNING \"My message\")\n\n  # CMake Warning (dev), continue processing\n  message(AUTHOR_WARNING \"My message\")\n\n  # CMake Error, continue processing, but skip generation\n  message(SEND_ERROR \"My message\")\n\n  # CMake Error, stop processing and generation\n  message(FATAL_ERROR \"My message\")\nendif()\n\nif( CONDITION )\n\nelseif( CONDITION )\n\nelse( CONDITION )\n\nendif( CONDITION )\n\n# Loops\nforeach(loop_var arg1 arg2 ...)\n  COMMAND1(ARGS ...)\n  COMMAND2(ARGS ...)\n  ...\nendforeach(loop_var)\n\nforeach(loop_var RANGE total)\nforeach(loop_var RANGE start stop [step])\n\nforeach(loop_var IN [LISTS [list1 [...]]]\n                    [ITEMS [item1 [...]]])\n\nwhile(condition)\n  COMMAND1(ARGS ...)\n  COMMAND2(ARGS ...)\n  ...\nendwhile(condition)\n\n\n# Logic Operations\nif(FALSE AND (FALSE OR TRUE))\n  message(\"Don't display!\")\nendif()\n\n# Set a regular, cache, or environment variable to a given value.\n# If the PARENT_SCOPE option is given, the variable will be set in the scope\n# above the current scope.\n# `set(<variable> <value>... [PARENT_SCOPE])`\n\n# How to reference variables inside quoted and unquoted arguments?\n# A variable reference is replaced by either the variable value or by the \n# empty string if the variable is not set.\n${variable_name}\n\n# Lists\n# Setup the list of source files\nset( LEARN_CMAKE_SOURCES \n  src/main.c\n  src/imagem.c\n  src/pather.c\n)\n\n# Calls the compiler\n#\n# ${PROJECT_NAME} refers to Learn_CMake \nadd_executable( ${PROJECT_NAME} ${LEARN_CMAKE_SOURCES} )\n\n# Link the libraries\ntarget_link_libraries( ${PROJECT_NAME} ${LIBS} m )\n\n# Where are the additional libraries installed? Note: provide includes\n# path here, subsequent checks will resolve everything else\nset( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/CMake/modules/\" )\n\n# Compiler Condition (gcc ; g++)\nif ( \"${CMAKE_C_COMPILER_ID}\" STREQUAL \"GNU\" )\n  message( STATUS \"Setting the flags for ${CMAKE_C_COMPILER_ID} compiler\" )\n  add_definitions( --std=c99 )\nendif()\n\n# Check for OS\nif( UNIX )\n    set( LEARN_CMAKE_DEFINITIONS\n        \"${LEARN_CMAKE_DEFINITIONS} -Wall -Wextra -Werror -Wno-deprecated-declarations -Wno-unused-parameter -Wno-comment\" )\nendif()\n```\n\n### More Resources\n\n+ [CMake tutorial](https://cmake.org/cmake-tutorial/)\n+ [CMake documentation](https://cmake.org/documentation/)\n+ [Mastering CMake](http://amzn.com/1930934319/)\n+ [An Introduction to Modern CMake](https://cliutils.gitlab.io/modern-cmake/)"
